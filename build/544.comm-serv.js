exports.id=544,exports.ids=[544],exports.modules={1544:function(e,t){!function(e){"use strict";const t="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?Symbol:e=>`Symbol(${e})`;function r(){}const o="undefined"!=typeof self?self:"undefined"!=typeof window?window:"undefined"!=typeof global?global:void 0;function n(e){return"object"==typeof e&&null!==e||"function"==typeof e}const i=r,a=Promise,s=Promise.prototype.then,l=Promise.resolve.bind(a),u=Promise.reject.bind(a);function c(e){return new a(e)}function d(e){return l(e)}function f(e){return u(e)}function b(e,t,r){return s.call(e,t,r)}function _(e,t,r){b(b(e,t,r),void 0,i)}function h(e,t){_(e,t)}function p(e,t){_(e,void 0,t)}function m(e,t,r){return b(e,t,r)}function y(e){b(e,void 0,i)}const g=(()=>{const e=o&&o.queueMicrotask;if("function"==typeof e)return e;const t=d(void 0);return e=>b(t,e)})();function v(e,t,r){if("function"!=typeof e)throw new TypeError("Argument is not a function");return Function.prototype.apply.call(e,t,r)}function w(e,t,r){try{return d(v(e,t,r))}catch(e){return f(e)}}class S{constructor(){this._cursor=0,this._size=0,this._front={_elements:[],_next:void 0},this._back=this._front,this._cursor=0,this._size=0}get length(){return this._size}push(e){const t=this._back;let r=t;16383===t._elements.length&&(r={_elements:[],_next:void 0}),t._elements.push(e),r!==t&&(this._back=r,t._next=r),++this._size}shift(){const e=this._front;let t=e;const r=this._cursor;let o=r+1;const n=e._elements,i=n[r];return 16384===o&&(t=e._next,o=0),--this._size,this._cursor=o,e!==t&&(this._front=t),n[r]=void 0,i}forEach(e){let t=this._cursor,r=this._front,o=r._elements;for(;!(t===o.length&&void 0===r._next||t===o.length&&(r=r._next,o=r._elements,t=0,0===o.length));)e(o[t]),++t}peek(){const e=this._front,t=this._cursor;return e._elements[t]}}function R(e,t){e._ownerReadableStream=t,t._reader=e,"readable"===t._state?q(e):"closed"===t._state?function(e){q(e),k(e)}(e):E(e,t._storedError)}function T(e,t){return vr(e._ownerReadableStream,t)}function P(e){"readable"===e._ownerReadableStream._state?O(e,new TypeError("Reader was released and can no longer be used to monitor the stream's closedness")):function(e,t){E(e,new TypeError("Reader was released and can no longer be used to monitor the stream's closedness"))}(e),e._ownerReadableStream._reader=void 0,e._ownerReadableStream=void 0}function C(e){return new TypeError("Cannot "+e+" a stream using a released reader")}function q(e){e._closedPromise=c(((t,r)=>{e._closedPromise_resolve=t,e._closedPromise_reject=r}))}function E(e,t){q(e),O(e,t)}function O(e,t){void 0!==e._closedPromise_reject&&(y(e._closedPromise),e._closedPromise_reject(t),e._closedPromise_resolve=void 0,e._closedPromise_reject=void 0)}function k(e){void 0!==e._closedPromise_resolve&&(e._closedPromise_resolve(void 0),e._closedPromise_resolve=void 0,e._closedPromise_reject=void 0)}const W=t("[[AbortSteps]]"),j=t("[[ErrorSteps]]"),A=t("[[CancelSteps]]"),z=t("[[PullSteps]]"),B=Number.isFinite||function(e){return"number"==typeof e&&isFinite(e)},F=Math.trunc||function(e){return e<0?Math.ceil(e):Math.floor(e)};function I(e,t){if(void 0!==e&&"object"!=typeof(r=e)&&"function"!=typeof r)throw new TypeError(`${t} is not an object.`);var r}function L(e,t){if("function"!=typeof e)throw new TypeError(`${t} is not a function.`)}function $(e,t){if(!function(e){return"object"==typeof e&&null!==e||"function"==typeof e}(e))throw new TypeError(`${t} is not an object.`)}function M(e,t,r){if(void 0===e)throw new TypeError(`Parameter ${t} is required in '${r}'.`)}function D(e,t,r){if(void 0===e)throw new TypeError(`${t} is required in '${r}'.`)}function x(e){return Number(e)}function Q(e){return 0===e?0:e}function N(e,t){const r=Number.MAX_SAFE_INTEGER;let o=Number(e);if(o=Q(o),!B(o))throw new TypeError(`${t} is not a finite number`);if(o=function(e){return Q(F(e))}(o),o<0||o>r)throw new TypeError(`${t} is outside the accepted range of 0 to ${r}, inclusive`);return B(o)&&0!==o?o:0}function Y(e,t){if(!yr(e))throw new TypeError(`${t} is not a ReadableStream.`)}function H(e){return new J(e)}function V(e,t){e._reader._readRequests.push(t)}function U(e,t,r){const o=e._reader._readRequests.shift();r?o._closeSteps():o._chunkSteps(t)}function G(e){return e._reader._readRequests.length}function X(e){const t=e._reader;return void 0!==t&&!!K(t)}class J{constructor(e){if(M(e,1,"ReadableStreamDefaultReader"),Y(e,"First parameter"),gr(e))throw new TypeError("This stream has already been locked for exclusive reading by another reader");R(this,e),this._readRequests=new S}get closed(){return K(this)?this._closedPromise:f(ee("closed"))}cancel(e){return K(this)?void 0===this._ownerReadableStream?f(C("cancel")):T(this,e):f(ee("cancel"))}read(){if(!K(this))return f(ee("read"));if(void 0===this._ownerReadableStream)return f(C("read from"));let e,t;const r=c(((r,o)=>{e=r,t=o}));return Z(this,{_chunkSteps:t=>e({value:t,done:!1}),_closeSteps:()=>e({value:void 0,done:!0}),_errorSteps:e=>t(e)}),r}releaseLock(){if(!K(this))throw ee("releaseLock");if(void 0!==this._ownerReadableStream){if(this._readRequests.length>0)throw new TypeError("Tried to release a reader lock when that reader has pending read() calls un-settled");P(this)}}}function K(e){return!!n(e)&&!!Object.prototype.hasOwnProperty.call(e,"_readRequests")&&e instanceof J}function Z(e,t){const r=e._ownerReadableStream;r._disturbed=!0,"closed"===r._state?t._closeSteps():"errored"===r._state?t._errorSteps(r._storedError):r._readableStreamController[z](t)}function ee(e){return new TypeError(`ReadableStreamDefaultReader.prototype.${e} can only be used on a ReadableStreamDefaultReader`)}Object.defineProperties(J.prototype,{cancel:{enumerable:!0},read:{enumerable:!0},releaseLock:{enumerable:!0},closed:{enumerable:!0}}),"symbol"==typeof t.toStringTag&&Object.defineProperty(J.prototype,t.toStringTag,{value:"ReadableStreamDefaultReader",configurable:!0});const te=Object.getPrototypeOf(Object.getPrototypeOf((async function*(){})).prototype);class re{constructor(e,t){this._ongoingPromise=void 0,this._isFinished=!1,this._reader=e,this._preventCancel=t}next(){const e=()=>this._nextSteps();return this._ongoingPromise=this._ongoingPromise?m(this._ongoingPromise,e,e):e(),this._ongoingPromise}return(e){const t=()=>this._returnSteps(e);return this._ongoingPromise?m(this._ongoingPromise,t,t):t()}_nextSteps(){if(this._isFinished)return Promise.resolve({value:void 0,done:!0});const e=this._reader;if(void 0===e._ownerReadableStream)return f(C("iterate"));let t,r;const o=c(((e,o)=>{t=e,r=o}));return Z(e,{_chunkSteps:e=>{this._ongoingPromise=void 0,g((()=>t({value:e,done:!1})))},_closeSteps:()=>{this._ongoingPromise=void 0,this._isFinished=!0,P(e),t({value:void 0,done:!0})},_errorSteps:t=>{this._ongoingPromise=void 0,this._isFinished=!0,P(e),r(t)}}),o}_returnSteps(e){if(this._isFinished)return Promise.resolve({value:e,done:!0});this._isFinished=!0;const t=this._reader;if(void 0===t._ownerReadableStream)return f(C("finish iterating"));if(!this._preventCancel){const r=T(t,e);return P(t),m(r,(()=>({value:e,done:!0})))}return P(t),d({value:e,done:!0})}}const oe={next(){return ne(this)?this._asyncIteratorImpl.next():f(ie("next"))},return(e){return ne(this)?this._asyncIteratorImpl.return(e):f(ie("return"))}};function ne(e){if(!n(e))return!1;if(!Object.prototype.hasOwnProperty.call(e,"_asyncIteratorImpl"))return!1;try{return e._asyncIteratorImpl instanceof re}catch(e){return!1}}function ie(e){return new TypeError(`ReadableStreamAsyncIterator.${e} can only be used on a ReadableSteamAsyncIterator`)}void 0!==te&&Object.setPrototypeOf(oe,te);const ae=Number.isNaN||function(e){return e!=e};function se(e){return e.slice()}function le(e,t,r,o,n){new Uint8Array(e).set(new Uint8Array(r,o,n),t)}function ue(e,t,r){if(e.slice)return e.slice(t,r);const o=r-t,n=new ArrayBuffer(o);return le(n,0,e,t,o),n}function ce(e){const t=ue(e.buffer,e.byteOffset,e.byteOffset+e.byteLength);return new Uint8Array(t)}function de(e){const t=e._queue.shift();return e._queueTotalSize-=t.size,e._queueTotalSize<0&&(e._queueTotalSize=0),t.value}function fe(e,t,r){if("number"!=typeof(o=r)||ae(o)||o<0||r===1/0)throw new RangeError("Size must be a finite, non-NaN, non-negative number.");var o;e._queue.push({value:t,size:r}),e._queueTotalSize+=r}function be(e){e._queue=new S,e._queueTotalSize=0}class _e{constructor(){throw new TypeError("Illegal constructor")}get view(){if(!me(this))throw $e("view");return this._view}respond(e){if(!me(this))throw $e("respond");if(M(e,1,"respond"),e=N(e,"First parameter"),void 0===this._associatedReadableByteStreamController)throw new TypeError("This BYOB request has been invalidated");this._view.buffer,Fe(this._associatedReadableByteStreamController,e)}respondWithNewView(e){if(!me(this))throw $e("respondWithNewView");if(M(e,1,"respondWithNewView"),!ArrayBuffer.isView(e))throw new TypeError("You can only respond with array buffer views");if(void 0===this._associatedReadableByteStreamController)throw new TypeError("This BYOB request has been invalidated");e.buffer,Ie(this._associatedReadableByteStreamController,e)}}Object.defineProperties(_e.prototype,{respond:{enumerable:!0},respondWithNewView:{enumerable:!0},view:{enumerable:!0}}),"symbol"==typeof t.toStringTag&&Object.defineProperty(_e.prototype,t.toStringTag,{value:"ReadableStreamBYOBRequest",configurable:!0});class he{constructor(){throw new TypeError("Illegal constructor")}get byobRequest(){if(!pe(this))throw Me("byobRequest");return ze(this)}get desiredSize(){if(!pe(this))throw Me("desiredSize");return Be(this)}close(){if(!pe(this))throw Me("close");if(this._closeRequested)throw new TypeError("The stream has already been closed; do not close it again!");const e=this._controlledReadableByteStream._state;if("readable"!==e)throw new TypeError(`The stream (in ${e} state) is not in the readable state and cannot be closed`);We(this)}enqueue(e){if(!pe(this))throw Me("enqueue");if(M(e,1,"enqueue"),!ArrayBuffer.isView(e))throw new TypeError("chunk must be an array buffer view");if(0===e.byteLength)throw new TypeError("chunk must have non-zero byteLength");if(0===e.buffer.byteLength)throw new TypeError("chunk's buffer must have non-zero byteLength");if(this._closeRequested)throw new TypeError("stream is closed or draining");const t=this._controlledReadableByteStream._state;if("readable"!==t)throw new TypeError(`The stream (in ${t} state) is not in the readable state and cannot be enqueued to`);je(this,e)}error(e){if(!pe(this))throw Me("error");Ae(this,e)}[A](e){ge(this),be(this);const t=this._cancelAlgorithm(e);return ke(this),t}[z](e){const t=this._controlledReadableByteStream;if(this._queueTotalSize>0){const t=this._queue.shift();this._queueTotalSize-=t.byteLength,Pe(this);const r=new Uint8Array(t.buffer,t.byteOffset,t.byteLength);return void e._chunkSteps(r)}const r=this._autoAllocateChunkSize;if(void 0!==r){let o;try{o=new ArrayBuffer(r)}catch(t){return void e._errorSteps(t)}const n={buffer:o,bufferByteLength:r,byteOffset:0,byteLength:r,bytesFilled:0,elementSize:1,viewConstructor:Uint8Array,readerType:"default"};this._pendingPullIntos.push(n)}V(t,e),ye(this)}}function pe(e){return!!n(e)&&!!Object.prototype.hasOwnProperty.call(e,"_controlledReadableByteStream")&&e instanceof he}function me(e){return!!n(e)&&!!Object.prototype.hasOwnProperty.call(e,"_associatedReadableByteStreamController")&&e instanceof _e}function ye(e){(function(e){const t=e._controlledReadableByteStream;return"readable"===t._state&&!e._closeRequested&&!!e._started&&(!!(X(t)&&G(t)>0)||!!(Ne(t)&&Qe(t)>0)||Be(e)>0)})(e)&&(e._pulling?e._pullAgain=!0:(e._pulling=!0,_(e._pullAlgorithm(),(()=>{e._pulling=!1,e._pullAgain&&(e._pullAgain=!1,ye(e))}),(t=>{Ae(e,t)}))))}function ge(e){Ce(e),e._pendingPullIntos=new S}function ve(e,t){let r=!1;"closed"===e._state&&(r=!0);const o=we(t);"default"===t.readerType?U(e,o,r):function(e,t,r){const o=e._reader._readIntoRequests.shift();r?o._closeSteps(t):o._chunkSteps(t)}(e,o,r)}function we(e){const t=e.bytesFilled,r=e.elementSize;return new e.viewConstructor(e.buffer,e.byteOffset,t/r)}function Se(e,t,r,o){e._queue.push({buffer:t,byteOffset:r,byteLength:o}),e._queueTotalSize+=o}function Re(e,t){const r=t.elementSize,o=t.bytesFilled-t.bytesFilled%r,n=Math.min(e._queueTotalSize,t.byteLength-t.bytesFilled),i=t.bytesFilled+n,a=i-i%r;let s=n,l=!1;a>o&&(s=a-t.bytesFilled,l=!0);const u=e._queue;for(;s>0;){const r=u.peek(),o=Math.min(s,r.byteLength),n=t.byteOffset+t.bytesFilled;le(t.buffer,n,r.buffer,r.byteOffset,o),r.byteLength===o?u.shift():(r.byteOffset+=o,r.byteLength-=o),e._queueTotalSize-=o,Te(0,o,t),s-=o}return l}function Te(e,t,r){r.bytesFilled+=t}function Pe(e){0===e._queueTotalSize&&e._closeRequested?(ke(e),wr(e._controlledReadableByteStream)):ye(e)}function Ce(e){null!==e._byobRequest&&(e._byobRequest._associatedReadableByteStreamController=void 0,e._byobRequest._view=null,e._byobRequest=null)}function qe(e){for(;e._pendingPullIntos.length>0;){if(0===e._queueTotalSize)return;const t=e._pendingPullIntos.peek();Re(e,t)&&(Oe(e),ve(e._controlledReadableByteStream,t))}}function Ee(e,t){const r=e._pendingPullIntos.peek();Ce(e),"closed"===e._controlledReadableByteStream._state?function(e,t){const r=e._controlledReadableByteStream;if(Ne(r))for(;Qe(r)>0;)ve(r,Oe(e))}(e):function(e,t,r){if(Te(0,t,r),r.bytesFilled<r.elementSize)return;Oe(e);const o=r.bytesFilled%r.elementSize;if(o>0){const t=r.byteOffset+r.bytesFilled,n=ue(r.buffer,t-o,t);Se(e,n,0,n.byteLength)}r.bytesFilled-=o,ve(e._controlledReadableByteStream,r),qe(e)}(e,t,r),ye(e)}function Oe(e){return e._pendingPullIntos.shift()}function ke(e){e._pullAlgorithm=void 0,e._cancelAlgorithm=void 0}function We(e){const t=e._controlledReadableByteStream;if(!e._closeRequested&&"readable"===t._state)if(e._queueTotalSize>0)e._closeRequested=!0;else{if(e._pendingPullIntos.length>0&&e._pendingPullIntos.peek().bytesFilled>0){const t=new TypeError("Insufficient bytes to fill elements in the given buffer");throw Ae(e,t),t}ke(e),wr(t)}}function je(e,t){const r=e._controlledReadableByteStream;if(e._closeRequested||"readable"!==r._state)return;const o=t.buffer,n=t.byteOffset,i=t.byteLength,a=o;if(e._pendingPullIntos.length>0){const t=e._pendingPullIntos.peek();t.buffer,t.buffer=t.buffer}Ce(e),X(r)?0===G(r)?Se(e,a,n,i):(e._pendingPullIntos.length>0&&Oe(e),U(r,new Uint8Array(a,n,i),!1)):Ne(r)?(Se(e,a,n,i),qe(e)):Se(e,a,n,i),ye(e)}function Ae(e,t){const r=e._controlledReadableByteStream;"readable"===r._state&&(ge(e),be(e),ke(e),Sr(r,t))}function ze(e){if(null===e._byobRequest&&e._pendingPullIntos.length>0){const t=e._pendingPullIntos.peek(),r=new Uint8Array(t.buffer,t.byteOffset+t.bytesFilled,t.byteLength-t.bytesFilled),o=Object.create(_e.prototype);!function(e,t,r){e._associatedReadableByteStreamController=t,e._view=r}(o,e,r),e._byobRequest=o}return e._byobRequest}function Be(e){const t=e._controlledReadableByteStream._state;return"errored"===t?null:"closed"===t?0:e._strategyHWM-e._queueTotalSize}function Fe(e,t){const r=e._pendingPullIntos.peek();if("closed"===e._controlledReadableByteStream._state){if(0!==t)throw new TypeError("bytesWritten must be 0 when calling respond() on a closed stream")}else{if(0===t)throw new TypeError("bytesWritten must be greater than 0 when calling respond() on a readable stream");if(r.bytesFilled+t>r.byteLength)throw new RangeError("bytesWritten out of range")}r.buffer=r.buffer,Ee(e,t)}function Ie(e,t){const r=e._pendingPullIntos.peek();if("closed"===e._controlledReadableByteStream._state){if(0!==t.byteLength)throw new TypeError("The view's length must be 0 when calling respondWithNewView() on a closed stream")}else if(0===t.byteLength)throw new TypeError("The view's length must be greater than 0 when calling respondWithNewView() on a readable stream");if(r.byteOffset+r.bytesFilled!==t.byteOffset)throw new RangeError("The region specified by view does not match byobRequest");if(r.bufferByteLength!==t.buffer.byteLength)throw new RangeError("The buffer of view has different capacity than byobRequest");if(r.bytesFilled+t.byteLength>r.byteLength)throw new RangeError("The region specified by view is larger than byobRequest");const o=t.byteLength;r.buffer=t.buffer,Ee(e,o)}function Le(e,t,r,o,n,i,a){t._controlledReadableByteStream=e,t._pullAgain=!1,t._pulling=!1,t._byobRequest=null,t._queue=t._queueTotalSize=void 0,be(t),t._closeRequested=!1,t._started=!1,t._strategyHWM=i,t._pullAlgorithm=o,t._cancelAlgorithm=n,t._autoAllocateChunkSize=a,t._pendingPullIntos=new S,e._readableStreamController=t,_(d(r()),(()=>{t._started=!0,ye(t)}),(e=>{Ae(t,e)}))}function $e(e){return new TypeError(`ReadableStreamBYOBRequest.prototype.${e} can only be used on a ReadableStreamBYOBRequest`)}function Me(e){return new TypeError(`ReadableByteStreamController.prototype.${e} can only be used on a ReadableByteStreamController`)}function De(e){return new Ye(e)}function xe(e,t){e._reader._readIntoRequests.push(t)}function Qe(e){return e._reader._readIntoRequests.length}function Ne(e){const t=e._reader;return void 0!==t&&!!He(t)}Object.defineProperties(he.prototype,{close:{enumerable:!0},enqueue:{enumerable:!0},error:{enumerable:!0},byobRequest:{enumerable:!0},desiredSize:{enumerable:!0}}),"symbol"==typeof t.toStringTag&&Object.defineProperty(he.prototype,t.toStringTag,{value:"ReadableByteStreamController",configurable:!0});class Ye{constructor(e){if(M(e,1,"ReadableStreamBYOBReader"),Y(e,"First parameter"),gr(e))throw new TypeError("This stream has already been locked for exclusive reading by another reader");if(!pe(e._readableStreamController))throw new TypeError("Cannot construct a ReadableStreamBYOBReader for a stream not constructed with a byte source");R(this,e),this._readIntoRequests=new S}get closed(){return He(this)?this._closedPromise:f(Ue("closed"))}cancel(e){return He(this)?void 0===this._ownerReadableStream?f(C("cancel")):T(this,e):f(Ue("cancel"))}read(e){if(!He(this))return f(Ue("read"));if(!ArrayBuffer.isView(e))return f(new TypeError("view must be an array buffer view"));if(0===e.byteLength)return f(new TypeError("view must have non-zero byteLength"));if(0===e.buffer.byteLength)return f(new TypeError("view's buffer must have non-zero byteLength"));if(e.buffer,void 0===this._ownerReadableStream)return f(C("read from"));let t,r;const o=c(((e,o)=>{t=e,r=o}));return Ve(this,e,{_chunkSteps:e=>t({value:e,done:!1}),_closeSteps:e=>t({value:e,done:!0}),_errorSteps:e=>r(e)}),o}releaseLock(){if(!He(this))throw Ue("releaseLock");if(void 0!==this._ownerReadableStream){if(this._readIntoRequests.length>0)throw new TypeError("Tried to release a reader lock when that reader has pending read() calls un-settled");P(this)}}}function He(e){return!!n(e)&&!!Object.prototype.hasOwnProperty.call(e,"_readIntoRequests")&&e instanceof Ye}function Ve(e,t,r){const o=e._ownerReadableStream;o._disturbed=!0,"errored"===o._state?r._errorSteps(o._storedError):function(e,t,r){const o=e._controlledReadableByteStream;let n=1;t.constructor!==DataView&&(n=t.constructor.BYTES_PER_ELEMENT);const i=t.constructor,a=t.buffer,s={buffer:a,bufferByteLength:a.byteLength,byteOffset:t.byteOffset,byteLength:t.byteLength,bytesFilled:0,elementSize:n,viewConstructor:i,readerType:"byob"};if(e._pendingPullIntos.length>0)return e._pendingPullIntos.push(s),void xe(o,r);if("closed"!==o._state){if(e._queueTotalSize>0){if(Re(e,s)){const t=we(s);return Pe(e),void r._chunkSteps(t)}if(e._closeRequested){const t=new TypeError("Insufficient bytes to fill elements in the given buffer");return Ae(e,t),void r._errorSteps(t)}}e._pendingPullIntos.push(s),xe(o,r),ye(e)}else{const e=new i(s.buffer,s.byteOffset,0);r._closeSteps(e)}}(o._readableStreamController,t,r)}function Ue(e){return new TypeError(`ReadableStreamBYOBReader.prototype.${e} can only be used on a ReadableStreamBYOBReader`)}function Ge(e,t){const{highWaterMark:r}=e;if(void 0===r)return t;if(ae(r)||r<0)throw new RangeError("Invalid highWaterMark");return r}function Xe(e){const{size:t}=e;return t||(()=>1)}function Je(e,t){I(e,t);const r=null==e?void 0:e.highWaterMark,o=null==e?void 0:e.size;return{highWaterMark:void 0===r?void 0:x(r),size:void 0===o?void 0:Ke(o,`${t} has member 'size' that`)}}function Ke(e,t){return L(e,t),t=>x(e(t))}function Ze(e,t,r){return L(e,r),r=>w(e,t,[r])}function et(e,t,r){return L(e,r),()=>w(e,t,[])}function tt(e,t,r){return L(e,r),r=>v(e,t,[r])}function rt(e,t,r){return L(e,r),(r,o)=>w(e,t,[r,o])}function ot(e,t){if(!lt(e))throw new TypeError(`${t} is not a WritableStream.`)}Object.defineProperties(Ye.prototype,{cancel:{enumerable:!0},read:{enumerable:!0},releaseLock:{enumerable:!0},closed:{enumerable:!0}}),"symbol"==typeof t.toStringTag&&Object.defineProperty(Ye.prototype,t.toStringTag,{value:"ReadableStreamBYOBReader",configurable:!0});const nt="function"==typeof AbortController;class it{constructor(e={},t={}){void 0===e?e=null:$(e,"First parameter");const r=Je(t,"Second parameter"),o=function(e,t){I(e,t);const r=null==e?void 0:e.abort,o=null==e?void 0:e.close,n=null==e?void 0:e.start,i=null==e?void 0:e.type,a=null==e?void 0:e.write;return{abort:void 0===r?void 0:Ze(r,e,`${t} has member 'abort' that`),close:void 0===o?void 0:et(o,e,`${t} has member 'close' that`),start:void 0===n?void 0:tt(n,e,`${t} has member 'start' that`),write:void 0===a?void 0:rt(a,e,`${t} has member 'write' that`),type:i}}(e,"First parameter");if(st(this),void 0!==o.type)throw new RangeError("Invalid type is specified");const n=Xe(r);!function(e,t,r,o){const n=Object.create(Pt.prototype);let i=()=>{},a=()=>d(void 0),s=()=>d(void 0),l=()=>d(void 0);void 0!==t.start&&(i=()=>t.start(n)),void 0!==t.write&&(a=e=>t.write(e,n)),void 0!==t.close&&(s=()=>t.close()),void 0!==t.abort&&(l=e=>t.abort(e)),qt(e,n,i,a,s,l,r,o)}(this,o,Ge(r,1),n)}get locked(){if(!lt(this))throw zt("locked");return ut(this)}abort(e){return lt(this)?ut(this)?f(new TypeError("Cannot abort a stream that already has a writer")):ct(this,e):f(zt("abort"))}close(){return lt(this)?ut(this)?f(new TypeError("Cannot close a stream that already has a writer")):ht(this)?f(new TypeError("Cannot close an already-closing stream")):dt(this):f(zt("close"))}getWriter(){if(!lt(this))throw zt("getWriter");return at(this)}}function at(e){return new yt(e)}function st(e){e._state="writable",e._storedError=void 0,e._writer=void 0,e._writableStreamController=void 0,e._writeRequests=new S,e._inFlightWriteRequest=void 0,e._closeRequest=void 0,e._inFlightCloseRequest=void 0,e._pendingAbortRequest=void 0,e._backpressure=!1}function lt(e){return!!n(e)&&!!Object.prototype.hasOwnProperty.call(e,"_writableStreamController")&&e instanceof it}function ut(e){return void 0!==e._writer}function ct(e,t){var r;if("closed"===e._state||"errored"===e._state)return d(void 0);e._writableStreamController._abortReason=t,null===(r=e._writableStreamController._abortController)||void 0===r||r.abort();const o=e._state;if("closed"===o||"errored"===o)return d(void 0);if(void 0!==e._pendingAbortRequest)return e._pendingAbortRequest._promise;let n=!1;"erroring"===o&&(n=!0,t=void 0);const i=c(((r,o)=>{e._pendingAbortRequest={_promise:void 0,_resolve:r,_reject:o,_reason:t,_wasAlreadyErroring:n}}));return e._pendingAbortRequest._promise=i,n||bt(e,t),i}function dt(e){const t=e._state;if("closed"===t||"errored"===t)return f(new TypeError(`The stream (in ${t} state) is not in the writable state and cannot be closed`));const r=c(((t,r)=>{const o={_resolve:t,_reject:r};e._closeRequest=o})),o=e._writer;var n;return void 0!==o&&e._backpressure&&"writable"===t&&Ht(o),fe(n=e._writableStreamController,Tt,0),kt(n),r}function ft(e,t){"writable"!==e._state?_t(e):bt(e,t)}function bt(e,t){const r=e._writableStreamController;e._state="erroring",e._storedError=t;const o=e._writer;void 0!==o&&wt(o,t),!function(e){return void 0!==e._inFlightWriteRequest||void 0!==e._inFlightCloseRequest}(e)&&r._started&&_t(e)}function _t(e){e._state="errored",e._writableStreamController[j]();const t=e._storedError;if(e._writeRequests.forEach((e=>{e._reject(t)})),e._writeRequests=new S,void 0===e._pendingAbortRequest)return void pt(e);const r=e._pendingAbortRequest;if(e._pendingAbortRequest=void 0,r._wasAlreadyErroring)return r._reject(t),void pt(e);_(e._writableStreamController[W](r._reason),(()=>{r._resolve(),pt(e)}),(t=>{r._reject(t),pt(e)}))}function ht(e){return void 0!==e._closeRequest||void 0!==e._inFlightCloseRequest}function pt(e){void 0!==e._closeRequest&&(e._closeRequest._reject(e._storedError),e._closeRequest=void 0);const t=e._writer;void 0!==t&&Mt(t,e._storedError)}function mt(e,t){const r=e._writer;void 0!==r&&t!==e._backpressure&&(t?function(e){xt(e)}(r):Ht(r)),e._backpressure=t}Object.defineProperties(it.prototype,{abort:{enumerable:!0},close:{enumerable:!0},getWriter:{enumerable:!0},locked:{enumerable:!0}}),"symbol"==typeof t.toStringTag&&Object.defineProperty(it.prototype,t.toStringTag,{value:"WritableStream",configurable:!0});class yt{constructor(e){if(M(e,1,"WritableStreamDefaultWriter"),ot(e,"First parameter"),ut(e))throw new TypeError("This stream has already been locked for exclusive writing by another writer");this._ownerWritableStream=e,e._writer=this;const t=e._state;if("writable"===t)!ht(e)&&e._backpressure?xt(this):Nt(this),Lt(this);else if("erroring"===t)Qt(this,e._storedError),Lt(this);else if("closed"===t)Nt(this),Lt(this),Dt(this);else{const t=e._storedError;Qt(this,t),$t(this,t)}}get closed(){return gt(this)?this._closedPromise:f(Ft("closed"))}get desiredSize(){if(!gt(this))throw Ft("desiredSize");if(void 0===this._ownerWritableStream)throw It("desiredSize");return function(e){const t=e._ownerWritableStream,r=t._state;return"errored"===r||"erroring"===r?null:"closed"===r?0:Ot(t._writableStreamController)}(this)}get ready(){return gt(this)?this._readyPromise:f(Ft("ready"))}abort(e){return gt(this)?void 0===this._ownerWritableStream?f(It("abort")):function(e,t){return ct(e._ownerWritableStream,t)}(this,e):f(Ft("abort"))}close(){if(!gt(this))return f(Ft("close"));const e=this._ownerWritableStream;return void 0===e?f(It("close")):ht(e)?f(new TypeError("Cannot close an already-closing stream")):vt(this)}releaseLock(){if(!gt(this))throw Ft("releaseLock");void 0!==this._ownerWritableStream&&St(this)}write(e){return gt(this)?void 0===this._ownerWritableStream?f(It("write to")):Rt(this,e):f(Ft("write"))}}function gt(e){return!!n(e)&&!!Object.prototype.hasOwnProperty.call(e,"_ownerWritableStream")&&e instanceof yt}function vt(e){return dt(e._ownerWritableStream)}function wt(e,t){"pending"===e._readyPromiseState?Yt(e,t):function(e,t){Qt(e,t)}(e,t)}function St(e){const t=e._ownerWritableStream,r=new TypeError("Writer was released and can no longer be used to monitor the stream's closedness");wt(e,r),function(e,t){"pending"===e._closedPromiseState?Mt(e,t):function(e,t){$t(e,t)}(e,t)}(e,r),t._writer=void 0,e._ownerWritableStream=void 0}function Rt(e,t){const r=e._ownerWritableStream,o=r._writableStreamController,n=function(e,t){try{return e._strategySizeAlgorithm(t)}catch(t){return Wt(e,t),1}}(o,t);if(r!==e._ownerWritableStream)return f(It("write to"));const i=r._state;if("errored"===i)return f(r._storedError);if(ht(r)||"closed"===i)return f(new TypeError("The stream is closing or closed and cannot be written to"));if("erroring"===i)return f(r._storedError);const a=function(e){return c(((t,r)=>{const o={_resolve:t,_reject:r};e._writeRequests.push(o)}))}(r);return function(e,t,r){try{fe(e,t,r)}catch(t){return void Wt(e,t)}const o=e._controlledWritableStream;ht(o)||"writable"!==o._state||mt(o,jt(e)),kt(e)}(o,t,n),a}Object.defineProperties(yt.prototype,{abort:{enumerable:!0},close:{enumerable:!0},releaseLock:{enumerable:!0},write:{enumerable:!0},closed:{enumerable:!0},desiredSize:{enumerable:!0},ready:{enumerable:!0}}),"symbol"==typeof t.toStringTag&&Object.defineProperty(yt.prototype,t.toStringTag,{value:"WritableStreamDefaultWriter",configurable:!0});const Tt={};class Pt{constructor(){throw new TypeError("Illegal constructor")}get abortReason(){if(!Ct(this))throw Bt("abortReason");return this._abortReason}get signal(){if(!Ct(this))throw Bt("signal");if(void 0===this._abortController)throw new TypeError("WritableStreamDefaultController.prototype.signal is not supported");return this._abortController.signal}error(e){if(!Ct(this))throw Bt("error");"writable"===this._controlledWritableStream._state&&At(this,e)}[W](e){const t=this._abortAlgorithm(e);return Et(this),t}[j](){be(this)}}function Ct(e){return!!n(e)&&!!Object.prototype.hasOwnProperty.call(e,"_controlledWritableStream")&&e instanceof Pt}function qt(e,t,r,o,n,i,a,s){t._controlledWritableStream=e,e._writableStreamController=t,t._queue=void 0,t._queueTotalSize=void 0,be(t),t._abortReason=void 0,t._abortController=function(){if(nt)return new AbortController}(),t._started=!1,t._strategySizeAlgorithm=s,t._strategyHWM=a,t._writeAlgorithm=o,t._closeAlgorithm=n,t._abortAlgorithm=i;const l=jt(t);mt(e,l),_(d(r()),(()=>{t._started=!0,kt(t)}),(r=>{t._started=!0,ft(e,r)}))}function Et(e){e._writeAlgorithm=void 0,e._closeAlgorithm=void 0,e._abortAlgorithm=void 0,e._strategySizeAlgorithm=void 0}function Ot(e){return e._strategyHWM-e._queueTotalSize}function kt(e){const t=e._controlledWritableStream;if(!e._started)return;if(void 0!==t._inFlightWriteRequest)return;if("erroring"===t._state)return void _t(t);if(0===e._queue.length)return;const r=e._queue.peek().value;r===Tt?function(e){const t=e._controlledWritableStream;(function(e){e._inFlightCloseRequest=e._closeRequest,e._closeRequest=void 0})(t),de(e);const r=e._closeAlgorithm();Et(e),_(r,(()=>{!function(e){e._inFlightCloseRequest._resolve(void 0),e._inFlightCloseRequest=void 0,"erroring"===e._state&&(e._storedError=void 0,void 0!==e._pendingAbortRequest&&(e._pendingAbortRequest._resolve(),e._pendingAbortRequest=void 0)),e._state="closed";const t=e._writer;void 0!==t&&Dt(t)}(t)}),(e=>{!function(e,t){e._inFlightCloseRequest._reject(t),e._inFlightCloseRequest=void 0,void 0!==e._pendingAbortRequest&&(e._pendingAbortRequest._reject(t),e._pendingAbortRequest=void 0),ft(e,t)}(t,e)}))}(e):function(e,t){const r=e._controlledWritableStream;!function(e){e._inFlightWriteRequest=e._writeRequests.shift()}(r),_(e._writeAlgorithm(t),(()=>{!function(e){e._inFlightWriteRequest._resolve(void 0),e._inFlightWriteRequest=void 0}(r);const t=r._state;if(de(e),!ht(r)&&"writable"===t){const t=jt(e);mt(r,t)}kt(e)}),(t=>{"writable"===r._state&&Et(e),function(e,t){e._inFlightWriteRequest._reject(t),e._inFlightWriteRequest=void 0,ft(e,t)}(r,t)}))}(e,r)}function Wt(e,t){"writable"===e._controlledWritableStream._state&&At(e,t)}function jt(e){return Ot(e)<=0}function At(e,t){const r=e._controlledWritableStream;Et(e),bt(r,t)}function zt(e){return new TypeError(`WritableStream.prototype.${e} can only be used on a WritableStream`)}function Bt(e){return new TypeError(`WritableStreamDefaultController.prototype.${e} can only be used on a WritableStreamDefaultController`)}function Ft(e){return new TypeError(`WritableStreamDefaultWriter.prototype.${e} can only be used on a WritableStreamDefaultWriter`)}function It(e){return new TypeError("Cannot "+e+" a stream using a released writer")}function Lt(e){e._closedPromise=c(((t,r)=>{e._closedPromise_resolve=t,e._closedPromise_reject=r,e._closedPromiseState="pending"}))}function $t(e,t){Lt(e),Mt(e,t)}function Mt(e,t){void 0!==e._closedPromise_reject&&(y(e._closedPromise),e._closedPromise_reject(t),e._closedPromise_resolve=void 0,e._closedPromise_reject=void 0,e._closedPromiseState="rejected")}function Dt(e){void 0!==e._closedPromise_resolve&&(e._closedPromise_resolve(void 0),e._closedPromise_resolve=void 0,e._closedPromise_reject=void 0,e._closedPromiseState="resolved")}function xt(e){e._readyPromise=c(((t,r)=>{e._readyPromise_resolve=t,e._readyPromise_reject=r})),e._readyPromiseState="pending"}function Qt(e,t){xt(e),Yt(e,t)}function Nt(e){xt(e),Ht(e)}function Yt(e,t){void 0!==e._readyPromise_reject&&(y(e._readyPromise),e._readyPromise_reject(t),e._readyPromise_resolve=void 0,e._readyPromise_reject=void 0,e._readyPromiseState="rejected")}function Ht(e){void 0!==e._readyPromise_resolve&&(e._readyPromise_resolve(void 0),e._readyPromise_resolve=void 0,e._readyPromise_reject=void 0,e._readyPromiseState="fulfilled")}Object.defineProperties(Pt.prototype,{abortReason:{enumerable:!0},signal:{enumerable:!0},error:{enumerable:!0}}),"symbol"==typeof t.toStringTag&&Object.defineProperty(Pt.prototype,t.toStringTag,{value:"WritableStreamDefaultController",configurable:!0});const Vt="undefined"!=typeof DOMException?DOMException:void 0,Ut=function(e){if("function"!=typeof e&&"object"!=typeof e)return!1;try{return new e,!0}catch(e){return!1}}(Vt)?Vt:function(){const e=function(e,t){this.message=e||"",this.name=t||"Error",Error.captureStackTrace&&Error.captureStackTrace(this,this.constructor)};return e.prototype=Object.create(Error.prototype),Object.defineProperty(e.prototype,"constructor",{value:e,writable:!0,configurable:!0}),e}();function Gt(e,t,o,n,i,a){const s=H(e),l=at(t);e._disturbed=!0;let u=!1,m=d(void 0);return c(((g,v)=>{let w;if(void 0!==a){if(w=()=>{const r=new Ut("Aborted","AbortError"),o=[];n||o.push((()=>"writable"===t._state?ct(t,r):d(void 0))),i||o.push((()=>"readable"===e._state?vr(e,r):d(void 0))),E((()=>Promise.all(o.map((e=>e())))),!0,r)},a.aborted)return void w();a.addEventListener("abort",w)}var S,R,T;if(q(e,s._closedPromise,(e=>{n?O(!0,e):E((()=>ct(t,e)),!0,e)})),q(t,l._closedPromise,(t=>{i?O(!0,t):E((()=>vr(e,t)),!0,t)})),S=e,R=s._closedPromise,T=()=>{o?O():E((()=>function(e){const t=e._ownerWritableStream,r=t._state;return ht(t)||"closed"===r?d(void 0):"errored"===r?f(t._storedError):vt(e)}(l)))},"closed"===S._state?T():h(R,T),ht(t)||"closed"===t._state){const t=new TypeError("the destination writable stream closed before all data could be piped to it");i?O(!0,t):E((()=>vr(e,t)),!0,t)}function C(){const e=m;return b(m,(()=>e!==m?C():void 0))}function q(e,t,r){"errored"===e._state?r(e._storedError):p(t,r)}function E(e,r,o){function n(){_(e(),(()=>k(r,o)),(e=>k(!0,e)))}u||(u=!0,"writable"!==t._state||ht(t)?n():h(C(),n))}function O(e,r){u||(u=!0,"writable"!==t._state||ht(t)?k(e,r):h(C(),(()=>k(e,r))))}function k(e,t){St(l),P(s),void 0!==a&&a.removeEventListener("abort",w),e?v(t):g(void 0)}y(c(((e,t)=>{!function o(n){n?e():b(u?d(!0):b(l._readyPromise,(()=>c(((e,t)=>{Z(s,{_chunkSteps:t=>{m=b(Rt(l,t),void 0,r),e(!1)},_closeSteps:()=>e(!0),_errorSteps:t})})))),o,t)}(!1)})))}))}class Xt{constructor(){throw new TypeError("Illegal constructor")}get desiredSize(){if(!Jt(this))throw sr("desiredSize");return nr(this)}close(){if(!Jt(this))throw sr("close");if(!ir(this))throw new TypeError("The stream is not in a state that permits close");tr(this)}enqueue(e){if(!Jt(this))throw sr("enqueue");if(!ir(this))throw new TypeError("The stream is not in a state that permits enqueue");return rr(this,e)}error(e){if(!Jt(this))throw sr("error");or(this,e)}[A](e){be(this);const t=this._cancelAlgorithm(e);return er(this),t}[z](e){const t=this._controlledReadableStream;if(this._queue.length>0){const r=de(this);this._closeRequested&&0===this._queue.length?(er(this),wr(t)):Kt(this),e._chunkSteps(r)}else V(t,e),Kt(this)}}function Jt(e){return!!n(e)&&!!Object.prototype.hasOwnProperty.call(e,"_controlledReadableStream")&&e instanceof Xt}function Kt(e){Zt(e)&&(e._pulling?e._pullAgain=!0:(e._pulling=!0,_(e._pullAlgorithm(),(()=>{e._pulling=!1,e._pullAgain&&(e._pullAgain=!1,Kt(e))}),(t=>{or(e,t)}))))}function Zt(e){const t=e._controlledReadableStream;return!!ir(e)&&!!e._started&&(!!(gr(t)&&G(t)>0)||nr(e)>0)}function er(e){e._pullAlgorithm=void 0,e._cancelAlgorithm=void 0,e._strategySizeAlgorithm=void 0}function tr(e){if(!ir(e))return;const t=e._controlledReadableStream;e._closeRequested=!0,0===e._queue.length&&(er(e),wr(t))}function rr(e,t){if(!ir(e))return;const r=e._controlledReadableStream;if(gr(r)&&G(r)>0)U(r,t,!1);else{let r;try{r=e._strategySizeAlgorithm(t)}catch(t){throw or(e,t),t}try{fe(e,t,r)}catch(t){throw or(e,t),t}}Kt(e)}function or(e,t){const r=e._controlledReadableStream;"readable"===r._state&&(be(e),er(e),Sr(r,t))}function nr(e){const t=e._controlledReadableStream._state;return"errored"===t?null:"closed"===t?0:e._strategyHWM-e._queueTotalSize}function ir(e){const t=e._controlledReadableStream._state;return!e._closeRequested&&"readable"===t}function ar(e,t,r,o,n,i,a){t._controlledReadableStream=e,t._queue=void 0,t._queueTotalSize=void 0,be(t),t._started=!1,t._closeRequested=!1,t._pullAgain=!1,t._pulling=!1,t._strategySizeAlgorithm=a,t._strategyHWM=i,t._pullAlgorithm=o,t._cancelAlgorithm=n,e._readableStreamController=t,_(d(r()),(()=>{t._started=!0,Kt(t)}),(e=>{or(t,e)}))}function sr(e){return new TypeError(`ReadableStreamDefaultController.prototype.${e} can only be used on a ReadableStreamDefaultController`)}function lr(e,t,r){return L(e,r),r=>w(e,t,[r])}function ur(e,t,r){return L(e,r),r=>w(e,t,[r])}function cr(e,t,r){return L(e,r),r=>v(e,t,[r])}function dr(e,t){if("bytes"!=(e=`${e}`))throw new TypeError(`${t} '${e}' is not a valid enumeration value for ReadableStreamType`);return e}function fr(e,t){if("byob"!=(e=`${e}`))throw new TypeError(`${t} '${e}' is not a valid enumeration value for ReadableStreamReaderMode`);return e}function br(e,t){I(e,t);const r=null==e?void 0:e.preventAbort,o=null==e?void 0:e.preventCancel,n=null==e?void 0:e.preventClose,i=null==e?void 0:e.signal;return void 0!==i&&function(e,t){if(!function(e){if("object"!=typeof e||null===e)return!1;try{return"boolean"==typeof e.aborted}catch(e){return!1}}(e))throw new TypeError(`${t} is not an AbortSignal.`)}(i,`${t} has member 'signal' that`),{preventAbort:Boolean(r),preventCancel:Boolean(o),preventClose:Boolean(n),signal:i}}Object.defineProperties(Xt.prototype,{close:{enumerable:!0},enqueue:{enumerable:!0},error:{enumerable:!0},desiredSize:{enumerable:!0}}),"symbol"==typeof t.toStringTag&&Object.defineProperty(Xt.prototype,t.toStringTag,{value:"ReadableStreamDefaultController",configurable:!0});class _r{constructor(e={},t={}){void 0===e?e=null:$(e,"First parameter");const r=Je(t,"Second parameter"),o=function(e,t){I(e,t);const r=e,o=null==r?void 0:r.autoAllocateChunkSize,n=null==r?void 0:r.cancel,i=null==r?void 0:r.pull,a=null==r?void 0:r.start,s=null==r?void 0:r.type;return{autoAllocateChunkSize:void 0===o?void 0:N(o,`${t} has member 'autoAllocateChunkSize' that`),cancel:void 0===n?void 0:lr(n,r,`${t} has member 'cancel' that`),pull:void 0===i?void 0:ur(i,r,`${t} has member 'pull' that`),start:void 0===a?void 0:cr(a,r,`${t} has member 'start' that`),type:void 0===s?void 0:dr(s,`${t} has member 'type' that`)}}(e,"First parameter");if(mr(this),"bytes"===o.type){if(void 0!==r.size)throw new RangeError("The strategy for a byte stream cannot have a size function");!function(e,t,r){const o=Object.create(he.prototype);let n=()=>{},i=()=>d(void 0),a=()=>d(void 0);void 0!==t.start&&(n=()=>t.start(o)),void 0!==t.pull&&(i=()=>t.pull(o)),void 0!==t.cancel&&(a=e=>t.cancel(e));const s=t.autoAllocateChunkSize;if(0===s)throw new TypeError("autoAllocateChunkSize must be greater than 0");Le(e,o,n,i,a,r,s)}(this,o,Ge(r,0))}else{const e=Xe(r);!function(e,t,r,o){const n=Object.create(Xt.prototype);let i=()=>{},a=()=>d(void 0),s=()=>d(void 0);void 0!==t.start&&(i=()=>t.start(n)),void 0!==t.pull&&(a=()=>t.pull(n)),void 0!==t.cancel&&(s=e=>t.cancel(e)),ar(e,n,i,a,s,r,o)}(this,o,Ge(r,1),e)}}get locked(){if(!yr(this))throw Rr("locked");return gr(this)}cancel(e){return yr(this)?gr(this)?f(new TypeError("Cannot cancel a stream that already has a reader")):vr(this,e):f(Rr("cancel"))}getReader(e){if(!yr(this))throw Rr("getReader");return void 0===function(e,t){I(e,t);const r=null==e?void 0:e.mode;return{mode:void 0===r?void 0:fr(r,`${t} has member 'mode' that`)}}(e,"First parameter").mode?H(this):De(this)}pipeThrough(e,t={}){if(!yr(this))throw Rr("pipeThrough");M(e,1,"pipeThrough");const r=function(e,t){I(e,t);const r=null==e?void 0:e.readable;D(r,"readable","ReadableWritablePair"),Y(r,`${t} has member 'readable' that`);const o=null==e?void 0:e.writable;return D(o,"writable","ReadableWritablePair"),ot(o,`${t} has member 'writable' that`),{readable:r,writable:o}}(e,"First parameter"),o=br(t,"Second parameter");if(gr(this))throw new TypeError("ReadableStream.prototype.pipeThrough cannot be used on a locked ReadableStream");if(ut(r.writable))throw new TypeError("ReadableStream.prototype.pipeThrough cannot be used on a locked WritableStream");return y(Gt(this,r.writable,o.preventClose,o.preventAbort,o.preventCancel,o.signal)),r.readable}pipeTo(e,t={}){if(!yr(this))return f(Rr("pipeTo"));if(void 0===e)return f("Parameter 1 is required in 'pipeTo'.");if(!lt(e))return f(new TypeError("ReadableStream.prototype.pipeTo's first argument must be a WritableStream"));let r;try{r=br(t,"Second parameter")}catch(e){return f(e)}return gr(this)?f(new TypeError("ReadableStream.prototype.pipeTo cannot be used on a locked ReadableStream")):ut(e)?f(new TypeError("ReadableStream.prototype.pipeTo cannot be used on a locked WritableStream")):Gt(this,e,r.preventClose,r.preventAbort,r.preventCancel,r.signal)}tee(){if(!yr(this))throw Rr("tee");return se(function(e,t){return pe(e._readableStreamController)?function(e){let t,r,o,n,i,a=H(e),s=!1,l=!1,u=!1,f=!1,b=!1;const _=c((e=>{i=e}));function h(e){p(e._closedPromise,(t=>{e===a&&(Ae(o._readableStreamController,t),Ae(n._readableStreamController,t),f&&b||i(void 0))}))}function m(){He(a)&&(P(a),a=H(e),h(a)),Z(a,{_chunkSteps:t=>{g((()=>{l=!1,u=!1;const r=t;let a=t;if(!f&&!b)try{a=ce(t)}catch(t){return Ae(o._readableStreamController,t),Ae(n._readableStreamController,t),void i(vr(e,t))}f||je(o._readableStreamController,r),b||je(n._readableStreamController,a),s=!1,l?v():u&&w()}))},_closeSteps:()=>{s=!1,f||We(o._readableStreamController),b||We(n._readableStreamController),o._readableStreamController._pendingPullIntos.length>0&&Fe(o._readableStreamController,0),n._readableStreamController._pendingPullIntos.length>0&&Fe(n._readableStreamController,0),f&&b||i(void 0)},_errorSteps:()=>{s=!1}})}function y(t,r){K(a)&&(P(a),a=De(e),h(a));const c=r?n:o,d=r?o:n;Ve(a,t,{_chunkSteps:t=>{g((()=>{l=!1,u=!1;const o=r?b:f;if(r?f:b)o||Ie(c._readableStreamController,t);else{let r;try{r=ce(t)}catch(t){return Ae(c._readableStreamController,t),Ae(d._readableStreamController,t),void i(vr(e,t))}o||Ie(c._readableStreamController,t),je(d._readableStreamController,r)}s=!1,l?v():u&&w()}))},_closeSteps:e=>{s=!1;const t=r?b:f,o=r?f:b;t||We(c._readableStreamController),o||We(d._readableStreamController),void 0!==e&&(t||Ie(c._readableStreamController,e),!o&&d._readableStreamController._pendingPullIntos.length>0&&Fe(d._readableStreamController,0)),t&&o||i(void 0)},_errorSteps:()=>{s=!1}})}function v(){if(s)return l=!0,d(void 0);s=!0;const e=ze(o._readableStreamController);return null===e?m():y(e._view,!1),d(void 0)}function w(){if(s)return u=!0,d(void 0);s=!0;const e=ze(n._readableStreamController);return null===e?m():y(e._view,!0),d(void 0)}function S(){}return o=pr(S,v,(function(o){if(f=!0,t=o,b){const o=se([t,r]),n=vr(e,o);i(n)}return _})),n=pr(S,w,(function(o){if(b=!0,r=o,f){const o=se([t,r]),n=vr(e,o);i(n)}return _})),h(a),[o,n]}(e):function(e,t){const r=H(e);let o,n,i,a,s,l=!1,u=!1,f=!1,b=!1;const _=c((e=>{s=e}));function h(){return l?(u=!0,d(void 0)):(l=!0,Z(r,{_chunkSteps:e=>{g((()=>{u=!1;const t=e,r=e;f||rr(i._readableStreamController,t),b||rr(a._readableStreamController,r),l=!1,u&&h()}))},_closeSteps:()=>{l=!1,f||tr(i._readableStreamController),b||tr(a._readableStreamController),f&&b||s(void 0)},_errorSteps:()=>{l=!1}}),d(void 0))}function m(){}return i=hr(m,h,(function(t){if(f=!0,o=t,b){const t=se([o,n]),r=vr(e,t);s(r)}return _})),a=hr(m,h,(function(t){if(b=!0,n=t,f){const t=se([o,n]),r=vr(e,t);s(r)}return _})),p(r._closedPromise,(e=>{or(i._readableStreamController,e),or(a._readableStreamController,e),f&&b||s(void 0)})),[i,a]}(e)}(this))}values(e){if(!yr(this))throw Rr("values");return function(e,t){const r=H(e),o=new re(r,t),n=Object.create(oe);return n._asyncIteratorImpl=o,n}(this,function(e,t){I(e,"First parameter");const r=null==e?void 0:e.preventCancel;return{preventCancel:Boolean(r)}}(e).preventCancel)}}function hr(e,t,r,o=1,n=(()=>1)){const i=Object.create(_r.prototype);return mr(i),ar(i,Object.create(Xt.prototype),e,t,r,o,n),i}function pr(e,t,r){const o=Object.create(_r.prototype);return mr(o),Le(o,Object.create(he.prototype),e,t,r,0,void 0),o}function mr(e){e._state="readable",e._reader=void 0,e._storedError=void 0,e._disturbed=!1}function yr(e){return!!n(e)&&!!Object.prototype.hasOwnProperty.call(e,"_readableStreamController")&&e instanceof _r}function gr(e){return void 0!==e._reader}function vr(e,t){if(e._disturbed=!0,"closed"===e._state)return d(void 0);if("errored"===e._state)return f(e._storedError);wr(e);const o=e._reader;return void 0!==o&&He(o)&&(o._readIntoRequests.forEach((e=>{e._closeSteps(void 0)})),o._readIntoRequests=new S),m(e._readableStreamController[A](t),r)}function wr(e){e._state="closed";const t=e._reader;void 0!==t&&(k(t),K(t)&&(t._readRequests.forEach((e=>{e._closeSteps()})),t._readRequests=new S))}function Sr(e,t){e._state="errored",e._storedError=t;const r=e._reader;void 0!==r&&(O(r,t),K(r)?(r._readRequests.forEach((e=>{e._errorSteps(t)})),r._readRequests=new S):(r._readIntoRequests.forEach((e=>{e._errorSteps(t)})),r._readIntoRequests=new S))}function Rr(e){return new TypeError(`ReadableStream.prototype.${e} can only be used on a ReadableStream`)}function Tr(e,t){I(e,t);const r=null==e?void 0:e.highWaterMark;return D(r,"highWaterMark","QueuingStrategyInit"),{highWaterMark:x(r)}}Object.defineProperties(_r.prototype,{cancel:{enumerable:!0},getReader:{enumerable:!0},pipeThrough:{enumerable:!0},pipeTo:{enumerable:!0},tee:{enumerable:!0},values:{enumerable:!0},locked:{enumerable:!0}}),"symbol"==typeof t.toStringTag&&Object.defineProperty(_r.prototype,t.toStringTag,{value:"ReadableStream",configurable:!0}),"symbol"==typeof t.asyncIterator&&Object.defineProperty(_r.prototype,t.asyncIterator,{value:_r.prototype.values,writable:!0,configurable:!0});const Pr=e=>e.byteLength;try{Object.defineProperty(Pr,"name",{value:"size",configurable:!0})}catch(e){}class Cr{constructor(e){M(e,1,"ByteLengthQueuingStrategy"),e=Tr(e,"First parameter"),this._byteLengthQueuingStrategyHighWaterMark=e.highWaterMark}get highWaterMark(){if(!Er(this))throw qr("highWaterMark");return this._byteLengthQueuingStrategyHighWaterMark}get size(){if(!Er(this))throw qr("size");return Pr}}function qr(e){return new TypeError(`ByteLengthQueuingStrategy.prototype.${e} can only be used on a ByteLengthQueuingStrategy`)}function Er(e){return!!n(e)&&!!Object.prototype.hasOwnProperty.call(e,"_byteLengthQueuingStrategyHighWaterMark")&&e instanceof Cr}Object.defineProperties(Cr.prototype,{highWaterMark:{enumerable:!0},size:{enumerable:!0}}),"symbol"==typeof t.toStringTag&&Object.defineProperty(Cr.prototype,t.toStringTag,{value:"ByteLengthQueuingStrategy",configurable:!0});const Or=()=>1;try{Object.defineProperty(Or,"name",{value:"size",configurable:!0})}catch(e){}class kr{constructor(e){M(e,1,"CountQueuingStrategy"),e=Tr(e,"First parameter"),this._countQueuingStrategyHighWaterMark=e.highWaterMark}get highWaterMark(){if(!jr(this))throw Wr("highWaterMark");return this._countQueuingStrategyHighWaterMark}get size(){if(!jr(this))throw Wr("size");return Or}}function Wr(e){return new TypeError(`CountQueuingStrategy.prototype.${e} can only be used on a CountQueuingStrategy`)}function jr(e){return!!n(e)&&!!Object.prototype.hasOwnProperty.call(e,"_countQueuingStrategyHighWaterMark")&&e instanceof kr}function Ar(e,t,r){return L(e,r),r=>w(e,t,[r])}function zr(e,t,r){return L(e,r),r=>v(e,t,[r])}function Br(e,t,r){return L(e,r),(r,o)=>w(e,t,[r,o])}Object.defineProperties(kr.prototype,{highWaterMark:{enumerable:!0},size:{enumerable:!0}}),"symbol"==typeof t.toStringTag&&Object.defineProperty(kr.prototype,t.toStringTag,{value:"CountQueuingStrategy",configurable:!0});class Fr{constructor(e={},t={},r={}){void 0===e&&(e=null);const o=Je(t,"Second parameter"),n=Je(r,"Third parameter"),i=function(e,t){I(e,t);const r=null==e?void 0:e.flush,o=null==e?void 0:e.readableType,n=null==e?void 0:e.start,i=null==e?void 0:e.transform,a=null==e?void 0:e.writableType;return{flush:void 0===r?void 0:Ar(r,e,`${t} has member 'flush' that`),readableType:o,start:void 0===n?void 0:zr(n,e,`${t} has member 'start' that`),transform:void 0===i?void 0:Br(i,e,`${t} has member 'transform' that`),writableType:a}}(e,"First parameter");if(void 0!==i.readableType)throw new RangeError("Invalid readableType specified");if(void 0!==i.writableType)throw new RangeError("Invalid writableType specified");const a=Ge(n,0),s=Xe(n),l=Ge(o,1),u=Xe(o);let b;!function(e,t,r,o,n,i){function a(){return t}e._writable=function(e,t,r,o,n=1,i=(()=>1)){const a=Object.create(it.prototype);return st(a),qt(a,Object.create(Pt.prototype),e,t,r,o,n,i),a}(a,(function(t){return function(e,t){const r=e._transformStreamController;return e._backpressure?m(e._backpressureChangePromise,(()=>{const o=e._writable;if("erroring"===o._state)throw o._storedError;return Yr(r,t)})):Yr(r,t)}(e,t)}),(function(){return function(e){const t=e._readable,r=e._transformStreamController,o=r._flushAlgorithm();return Qr(r),m(o,(()=>{if("errored"===t._state)throw t._storedError;tr(t._readableStreamController)}),(r=>{throw Lr(e,r),t._storedError}))}(e)}),(function(t){return function(e,t){return Lr(e,t),d(void 0)}(e,t)}),r,o),e._readable=hr(a,(function(){return function(e){return Mr(e,!1),e._backpressureChangePromise}(e)}),(function(t){return $r(e,t),d(void 0)}),n,i),e._backpressure=void 0,e._backpressureChangePromise=void 0,e._backpressureChangePromise_resolve=void 0,Mr(e,!0),e._transformStreamController=void 0}(this,c((e=>{b=e})),l,u,a,s),function(e,t){const r=Object.create(Dr.prototype);let o=e=>{try{return Nr(r,e),d(void 0)}catch(e){return f(e)}},n=()=>d(void 0);void 0!==t.transform&&(o=e=>t.transform(e,r)),void 0!==t.flush&&(n=()=>t.flush(r)),function(e,t,r,o){t._controlledTransformStream=e,e._transformStreamController=t,t._transformAlgorithm=r,t._flushAlgorithm=o}(e,r,o,n)}(this,i),void 0!==i.start?b(i.start(this._transformStreamController)):b(void 0)}get readable(){if(!Ir(this))throw Vr("readable");return this._readable}get writable(){if(!Ir(this))throw Vr("writable");return this._writable}}function Ir(e){return!!n(e)&&!!Object.prototype.hasOwnProperty.call(e,"_transformStreamController")&&e instanceof Fr}function Lr(e,t){or(e._readable._readableStreamController,t),$r(e,t)}function $r(e,t){Qr(e._transformStreamController),Wt(e._writable._writableStreamController,t),e._backpressure&&Mr(e,!1)}function Mr(e,t){void 0!==e._backpressureChangePromise&&e._backpressureChangePromise_resolve(),e._backpressureChangePromise=c((t=>{e._backpressureChangePromise_resolve=t})),e._backpressure=t}Object.defineProperties(Fr.prototype,{readable:{enumerable:!0},writable:{enumerable:!0}}),"symbol"==typeof t.toStringTag&&Object.defineProperty(Fr.prototype,t.toStringTag,{value:"TransformStream",configurable:!0});class Dr{constructor(){throw new TypeError("Illegal constructor")}get desiredSize(){if(!xr(this))throw Hr("desiredSize");return nr(this._controlledTransformStream._readable._readableStreamController)}enqueue(e){if(!xr(this))throw Hr("enqueue");Nr(this,e)}error(e){if(!xr(this))throw Hr("error");var t;t=e,Lr(this._controlledTransformStream,t)}terminate(){if(!xr(this))throw Hr("terminate");!function(e){const t=e._controlledTransformStream;tr(t._readable._readableStreamController),$r(t,new TypeError("TransformStream terminated"))}(this)}}function xr(e){return!!n(e)&&!!Object.prototype.hasOwnProperty.call(e,"_controlledTransformStream")&&e instanceof Dr}function Qr(e){e._transformAlgorithm=void 0,e._flushAlgorithm=void 0}function Nr(e,t){const r=e._controlledTransformStream,o=r._readable._readableStreamController;if(!ir(o))throw new TypeError("Readable side is not in a state that permits enqueue");try{rr(o,t)}catch(e){throw $r(r,e),r._readable._storedError}(function(e){return!Zt(e)})(o)!==r._backpressure&&Mr(r,!0)}function Yr(e,t){return m(e._transformAlgorithm(t),void 0,(t=>{throw Lr(e._controlledTransformStream,t),t}))}function Hr(e){return new TypeError(`TransformStreamDefaultController.prototype.${e} can only be used on a TransformStreamDefaultController`)}function Vr(e){return new TypeError(`TransformStream.prototype.${e} can only be used on a TransformStream`)}Object.defineProperties(Dr.prototype,{enqueue:{enumerable:!0},error:{enumerable:!0},terminate:{enumerable:!0},desiredSize:{enumerable:!0}}),"symbol"==typeof t.toStringTag&&Object.defineProperty(Dr.prototype,t.toStringTag,{value:"TransformStreamDefaultController",configurable:!0});const Ur={ReadableStream:_r,ReadableStreamDefaultController:Xt,ReadableByteStreamController:he,ReadableStreamBYOBRequest:_e,ReadableStreamDefaultReader:J,ReadableStreamBYOBReader:Ye,WritableStream:it,WritableStreamDefaultController:Pt,WritableStreamDefaultWriter:yt,ByteLengthQueuingStrategy:Cr,CountQueuingStrategy:kr,TransformStream:Fr,TransformStreamDefaultController:Dr};if(void 0!==o)for(const e in Ur)Object.prototype.hasOwnProperty.call(Ur,e)&&Object.defineProperty(o,e,{value:Ur[e],writable:!0,configurable:!0});e.ByteLengthQueuingStrategy=Cr,e.CountQueuingStrategy=kr,e.ReadableByteStreamController=he,e.ReadableStream=_r,e.ReadableStreamBYOBReader=Ye,e.ReadableStreamBYOBRequest=_e,e.ReadableStreamDefaultController=Xt,e.ReadableStreamDefaultReader=J,e.TransformStream=Fr,e.TransformStreamDefaultController=Dr,e.WritableStream=it,e.WritableStreamDefaultController=Pt,e.WritableStreamDefaultWriter=yt,Object.defineProperty(e,"__esModule",{value:!0})}(t)}};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,