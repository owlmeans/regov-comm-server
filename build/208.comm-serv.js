/*! For license information please see 208.comm-serv.js.LICENSE.txt */
exports.id=208,exports.ids=[208],exports.modules={6123:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=r(5397);class n extends o.EventTarget{constructor(){throw super(),new TypeError("AbortSignal cannot be constructed directly")}get aborted(){const e=i.get(this);if("boolean"!=typeof e)throw new TypeError("Expected 'this' to be an 'AbortSignal' object, but got "+(null===this?"null":typeof this));return e}}o.defineEventAttribute(n.prototype,"abort");const i=new WeakMap;Object.defineProperties(n.prototype,{aborted:{enumerable:!0}}),"function"==typeof Symbol&&"symbol"==typeof Symbol.toStringTag&&Object.defineProperty(n.prototype,Symbol.toStringTag,{configurable:!0,value:"AbortSignal"});class s{constructor(){a.set(this,function(){const e=Object.create(n.prototype);return o.EventTarget.call(e),i.set(e,!1),e}())}get signal(){return l(this)}abort(){var e;e=l(this),!1===i.get(e)&&(i.set(e,!0),e.dispatchEvent({type:"abort"}))}}const a=new WeakMap;function l(e){const t=a.get(e);if(null==t)throw new TypeError("Expected 'this' to be an 'AbortController' object, but got "+(null===e?"null":typeof e));return t}Object.defineProperties(s.prototype,{signal:{enumerable:!0},abort:{enumerable:!0}}),"function"==typeof Symbol&&"symbol"==typeof Symbol.toStringTag&&Object.defineProperty(s.prototype,Symbol.toStringTag,{configurable:!0,value:"AbortController"}),t.AbortController=s,t.AbortSignal=n,t.default=s,e.exports=s,e.exports.AbortController=e.exports.default=s,e.exports.AbortSignal=n},5397:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=new WeakMap,o=new WeakMap;function n(e){const t=r.get(e);return console.assert(null!=t,"'this' is expected an Event object, but got",e),t}function i(e){null==e.passiveListener?e.event.cancelable&&(e.canceled=!0,"function"==typeof e.event.preventDefault&&e.event.preventDefault()):"undefined"!=typeof console&&"function"==typeof console.error&&console.error("Unable to preventDefault inside passive event listener invocation.",e.passiveListener)}function s(e,t){r.set(this,{eventTarget:e,event:t,eventPhase:2,currentTarget:e,canceled:!1,stopped:!1,immediateStopped:!1,passiveListener:null,timeStamp:t.timeStamp||Date.now()}),Object.defineProperty(this,"isTrusted",{value:!1,enumerable:!0});const o=Object.keys(t);for(let e=0;e<o.length;++e){const t=o[e];t in this||Object.defineProperty(this,t,a(t))}}function a(e){return{get(){return n(this).event[e]},set(t){n(this).event[e]=t},configurable:!0,enumerable:!0}}function l(e){return{value(){const t=n(this).event;return t[e].apply(t,arguments)},configurable:!0,enumerable:!0}}function u(e){if(null==e||e===Object.prototype)return s;let t=o.get(e);return null==t&&(t=function(e,t){const r=Object.keys(t);if(0===r.length)return e;function o(t,r){e.call(this,t,r)}o.prototype=Object.create(e.prototype,{constructor:{value:o,configurable:!0,writable:!0}});for(let n=0;n<r.length;++n){const i=r[n];if(!(i in e.prototype)){const e="function"==typeof Object.getOwnPropertyDescriptor(t,i).value;Object.defineProperty(o.prototype,i,e?l(i):a(i))}}return o}(u(Object.getPrototypeOf(e)),e),o.set(e,t)),t}function c(e){return n(e).immediateStopped}function d(e,t){n(e).passiveListener=t}s.prototype={get type(){return n(this).event.type},get target(){return n(this).eventTarget},get currentTarget(){return n(this).currentTarget},composedPath(){const e=n(this).currentTarget;return null==e?[]:[e]},get NONE(){return 0},get CAPTURING_PHASE(){return 1},get AT_TARGET(){return 2},get BUBBLING_PHASE(){return 3},get eventPhase(){return n(this).eventPhase},stopPropagation(){const e=n(this);e.stopped=!0,"function"==typeof e.event.stopPropagation&&e.event.stopPropagation()},stopImmediatePropagation(){const e=n(this);e.stopped=!0,e.immediateStopped=!0,"function"==typeof e.event.stopImmediatePropagation&&e.event.stopImmediatePropagation()},get bubbles(){return Boolean(n(this).event.bubbles)},get cancelable(){return Boolean(n(this).event.cancelable)},preventDefault(){i(n(this))},get defaultPrevented(){return n(this).canceled},get composed(){return Boolean(n(this).event.composed)},get timeStamp(){return n(this).timeStamp},get srcElement(){return n(this).eventTarget},get cancelBubble(){return n(this).stopped},set cancelBubble(e){if(!e)return;const t=n(this);t.stopped=!0,"boolean"==typeof t.event.cancelBubble&&(t.event.cancelBubble=!0)},get returnValue(){return!n(this).canceled},set returnValue(e){e||i(n(this))},initEvent(){}},Object.defineProperty(s.prototype,"constructor",{value:s,configurable:!0,writable:!0}),"undefined"!=typeof window&&void 0!==window.Event&&(Object.setPrototypeOf(s.prototype,window.Event.prototype),o.set(window.Event.prototype,s));const f=new WeakMap,h=3;function p(e){return null!==e&&"object"==typeof e}function b(e){const t=f.get(e);if(null==t)throw new TypeError("'this' is expected an EventTarget object, but got another value.");return t}function y(e,t){Object.defineProperty(e,`on${t}`,function(e){return{get(){let t=b(this).get(e);for(;null!=t;){if(t.listenerType===h)return t.listener;t=t.next}return null},set(t){"function"==typeof t||p(t)||(t=null);const r=b(this);let o=null,n=r.get(e);for(;null!=n;)n.listenerType===h?null!==o?o.next=n.next:null!==n.next?r.set(e,n.next):r.delete(e):o=n,n=n.next;if(null!==t){const n={listener:t,listenerType:h,passive:!1,once:!1,next:null};null===o?r.set(e,n):o.next=n}},configurable:!0,enumerable:!0}}(t))}function m(e){function t(){g.call(this)}t.prototype=Object.create(g.prototype,{constructor:{value:t,configurable:!0,writable:!0}});for(let r=0;r<e.length;++r)y(t.prototype,e[r]);return t}function g(){if(!(this instanceof g)){if(1===arguments.length&&Array.isArray(arguments[0]))return m(arguments[0]);if(arguments.length>0){const e=new Array(arguments.length);for(let t=0;t<arguments.length;++t)e[t]=arguments[t];return m(e)}throw new TypeError("Cannot call a class as a function")}f.set(this,new Map)}g.prototype={addEventListener(e,t,r){if(null==t)return;if("function"!=typeof t&&!p(t))throw new TypeError("'listener' should be a function or an object.");const o=b(this),n=p(r),i=(n?Boolean(r.capture):Boolean(r))?1:2,s={listener:t,listenerType:i,passive:n&&Boolean(r.passive),once:n&&Boolean(r.once),next:null};let a=o.get(e);if(void 0===a)return void o.set(e,s);let l=null;for(;null!=a;){if(a.listener===t&&a.listenerType===i)return;l=a,a=a.next}l.next=s},removeEventListener(e,t,r){if(null==t)return;const o=b(this),n=(p(r)?Boolean(r.capture):Boolean(r))?1:2;let i=null,s=o.get(e);for(;null!=s;){if(s.listener===t&&s.listenerType===n)return void(null!==i?i.next=s.next:null!==s.next?o.set(e,s.next):o.delete(e));i=s,s=s.next}},dispatchEvent(e){if(null==e||"string"!=typeof e.type)throw new TypeError('"event.type" should be a string.');const t=b(this),r=e.type;let o=t.get(r);if(null==o)return!0;const i=function(e,t){return new(u(Object.getPrototypeOf(t)))(e,t)}(this,e);let s=null;for(;null!=o;){if(o.once?null!==s?s.next=o.next:null!==o.next?t.set(r,o.next):t.delete(r):s=o,d(i,o.passive?o.listener:null),"function"==typeof o.listener)try{o.listener.call(this,i)}catch(e){"undefined"!=typeof console&&"function"==typeof console.error&&console.error(e)}else o.listenerType!==h&&"function"==typeof o.listener.handleEvent&&o.listener.handleEvent(i);if(c(i))break;o=o.next}return d(i,null),function(e,t){n(e).eventPhase=0}(i),function(e,t){n(e).currentTarget=null}(i),!i.defaultPrevented}},Object.defineProperty(g.prototype,"constructor",{value:g,configurable:!0,writable:!0}),"undefined"!=typeof window&&void 0!==window.EventTarget&&Object.setPrototypeOf(g.prototype,window.EventTarget.prototype),t.defineEventAttribute=y,t.EventTarget=g,t.default=g,e.exports=g,e.exports.EventTarget=e.exports.default=g,e.exports.defineEventAttribute=y},583:(e,t,r)=>{if(!globalThis.DOMException)try{const{MessageChannel:e}=r(1267),t=(new e).port1,o=new ArrayBuffer;t.postMessage(o,[o,o])}catch(e){"DOMException"===e.constructor.name&&(globalThis.DOMException=e.constructor)}e.exports=globalThis.DOMException},3879:function(e,t){var r;r=function(e){"use strict";const t="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?Symbol:e=>`Symbol(${e})`;function r(){}const o="undefined"!=typeof self?self:"undefined"!=typeof window?window:"undefined"!=typeof global?global:void 0;function n(e){return"object"==typeof e&&null!==e||"function"==typeof e}const i=r,s=Promise,a=Promise.prototype.then,l=Promise.resolve.bind(s),u=Promise.reject.bind(s);function c(e){return new s(e)}function d(e){return l(e)}function f(e){return u(e)}function h(e,t,r){return a.call(e,t,r)}function p(e,t,r){h(h(e,t,r),void 0,i)}function b(e,t){p(e,t)}function y(e,t){p(e,void 0,t)}function m(e,t,r){return h(e,t,r)}function g(e){h(e,void 0,i)}const _=(()=>{const e=o&&o.queueMicrotask;if("function"==typeof e)return e;const t=d(void 0);return e=>h(t,e)})();function w(e,t,r){if("function"!=typeof e)throw new TypeError("Argument is not a function");return Function.prototype.apply.call(e,t,r)}function v(e,t,r){try{return d(w(e,t,r))}catch(e){return f(e)}}class S{constructor(){this._cursor=0,this._size=0,this._front={_elements:[],_next:void 0},this._back=this._front,this._cursor=0,this._size=0}get length(){return this._size}push(e){const t=this._back;let r=t;16383===t._elements.length&&(r={_elements:[],_next:void 0}),t._elements.push(e),r!==t&&(this._back=r,t._next=r),++this._size}shift(){const e=this._front;let t=e;const r=this._cursor;let o=r+1;const n=e._elements,i=n[r];return 16384===o&&(t=e._next,o=0),--this._size,this._cursor=o,e!==t&&(this._front=t),n[r]=void 0,i}forEach(e){let t=this._cursor,r=this._front,o=r._elements;for(;!(t===o.length&&void 0===r._next||t===o.length&&(r=r._next,o=r._elements,t=0,0===o.length));)e(o[t]),++t}peek(){const e=this._front,t=this._cursor;return e._elements[t]}}function T(e,t){e._ownerReadableStream=t,t._reader=e,"readable"===t._state?C(e):"closed"===t._state?function(e){C(e),j(e)}(e):O(e,t._storedError)}function R(e,t){return wr(e._ownerReadableStream,t)}function E(e){"readable"===e._ownerReadableStream._state?q(e,new TypeError("Reader was released and can no longer be used to monitor the stream's closedness")):function(e,t){O(e,new TypeError("Reader was released and can no longer be used to monitor the stream's closedness"))}(e),e._ownerReadableStream._reader=void 0,e._ownerReadableStream=void 0}function P(e){return new TypeError("Cannot "+e+" a stream using a released reader")}function C(e){e._closedPromise=c(((t,r)=>{e._closedPromise_resolve=t,e._closedPromise_reject=r}))}function O(e,t){C(e),q(e,t)}function q(e,t){void 0!==e._closedPromise_reject&&(g(e._closedPromise),e._closedPromise_reject(t),e._closedPromise_resolve=void 0,e._closedPromise_reject=void 0)}function j(e){void 0!==e._closedPromise_resolve&&(e._closedPromise_resolve(void 0),e._closedPromise_resolve=void 0,e._closedPromise_reject=void 0)}const k=t("[[AbortSteps]]"),A=t("[[ErrorSteps]]"),B=t("[[CancelSteps]]"),L=t("[[PullSteps]]"),W=Number.isFinite||function(e){return"number"==typeof e&&isFinite(e)},z=Math.trunc||function(e){return e<0?Math.ceil(e):Math.floor(e)};function x(e,t){if(void 0!==e&&"object"!=typeof(r=e)&&"function"!=typeof r)throw new TypeError(`${t} is not an object.`);var r}function $(e,t){if("function"!=typeof e)throw new TypeError(`${t} is not a function.`)}function F(e,t){if(!function(e){return"object"==typeof e&&null!==e||"function"==typeof e}(e))throw new TypeError(`${t} is not an object.`)}function M(e,t,r){if(void 0===e)throw new TypeError(`Parameter ${t} is required in '${r}'.`)}function I(e,t,r){if(void 0===e)throw new TypeError(`${t} is required in '${r}'.`)}function U(e){return Number(e)}function D(e){return 0===e?0:e}function H(e,t){const r=Number.MAX_SAFE_INTEGER;let o=Number(e);if(o=D(o),!W(o))throw new TypeError(`${t} is not a finite number`);if(o=function(e){return D(z(e))}(o),o<0||o>r)throw new TypeError(`${t} is outside the accepted range of 0 to ${r}, inclusive`);return W(o)&&0!==o?o:0}function N(e,t){if(!gr(e))throw new TypeError(`${t} is not a ReadableStream.`)}function Z(e){return new J(e)}function V(e,t){e._reader._readRequests.push(t)}function Q(e,t,r){const o=e._reader._readRequests.shift();r?o._closeSteps():o._chunkSteps(t)}function Y(e){return e._reader._readRequests.length}function G(e){const t=e._reader;return void 0!==t&&!!K(t)}class J{constructor(e){if(M(e,1,"ReadableStreamDefaultReader"),N(e,"First parameter"),_r(e))throw new TypeError("This stream has already been locked for exclusive reading by another reader");T(this,e),this._readRequests=new S}get closed(){return K(this)?this._closedPromise:f(ee("closed"))}cancel(e=void 0){return K(this)?void 0===this._ownerReadableStream?f(P("cancel")):R(this,e):f(ee("cancel"))}read(){if(!K(this))return f(ee("read"));if(void 0===this._ownerReadableStream)return f(P("read from"));let e,t;const r=c(((r,o)=>{e=r,t=o}));return X(this,{_chunkSteps:t=>e({value:t,done:!1}),_closeSteps:()=>e({value:void 0,done:!0}),_errorSteps:e=>t(e)}),r}releaseLock(){if(!K(this))throw ee("releaseLock");if(void 0!==this._ownerReadableStream){if(this._readRequests.length>0)throw new TypeError("Tried to release a reader lock when that reader has pending read() calls un-settled");E(this)}}}function K(e){return!!n(e)&&!!Object.prototype.hasOwnProperty.call(e,"_readRequests")&&e instanceof J}function X(e,t){const r=e._ownerReadableStream;r._disturbed=!0,"closed"===r._state?t._closeSteps():"errored"===r._state?t._errorSteps(r._storedError):r._readableStreamController[L](t)}function ee(e){return new TypeError(`ReadableStreamDefaultReader.prototype.${e} can only be used on a ReadableStreamDefaultReader`)}Object.defineProperties(J.prototype,{cancel:{enumerable:!0},read:{enumerable:!0},releaseLock:{enumerable:!0},closed:{enumerable:!0}}),"symbol"==typeof t.toStringTag&&Object.defineProperty(J.prototype,t.toStringTag,{value:"ReadableStreamDefaultReader",configurable:!0});const te=Object.getPrototypeOf(Object.getPrototypeOf((async function*(){})).prototype);class re{constructor(e,t){this._ongoingPromise=void 0,this._isFinished=!1,this._reader=e,this._preventCancel=t}next(){const e=()=>this._nextSteps();return this._ongoingPromise=this._ongoingPromise?m(this._ongoingPromise,e,e):e(),this._ongoingPromise}return(e){const t=()=>this._returnSteps(e);return this._ongoingPromise?m(this._ongoingPromise,t,t):t()}_nextSteps(){if(this._isFinished)return Promise.resolve({value:void 0,done:!0});const e=this._reader;if(void 0===e._ownerReadableStream)return f(P("iterate"));let t,r;const o=c(((e,o)=>{t=e,r=o}));return X(e,{_chunkSteps:e=>{this._ongoingPromise=void 0,_((()=>t({value:e,done:!1})))},_closeSteps:()=>{this._ongoingPromise=void 0,this._isFinished=!0,E(e),t({value:void 0,done:!0})},_errorSteps:t=>{this._ongoingPromise=void 0,this._isFinished=!0,E(e),r(t)}}),o}_returnSteps(e){if(this._isFinished)return Promise.resolve({value:e,done:!0});this._isFinished=!0;const t=this._reader;if(void 0===t._ownerReadableStream)return f(P("finish iterating"));if(!this._preventCancel){const r=R(t,e);return E(t),m(r,(()=>({value:e,done:!0})))}return E(t),d({value:e,done:!0})}}const oe={next(){return ne(this)?this._asyncIteratorImpl.next():f(ie("next"))},return(e){return ne(this)?this._asyncIteratorImpl.return(e):f(ie("return"))}};function ne(e){if(!n(e))return!1;if(!Object.prototype.hasOwnProperty.call(e,"_asyncIteratorImpl"))return!1;try{return e._asyncIteratorImpl instanceof re}catch(e){return!1}}function ie(e){return new TypeError(`ReadableStreamAsyncIterator.${e} can only be used on a ReadableSteamAsyncIterator`)}void 0!==te&&Object.setPrototypeOf(oe,te);const se=Number.isNaN||function(e){return e!=e};function ae(e){return e.slice()}function le(e,t,r,o,n){new Uint8Array(e).set(new Uint8Array(r,o,n),t)}function ue(e,t,r){if(e.slice)return e.slice(t,r);const o=r-t,n=new ArrayBuffer(o);return le(n,0,e,t,o),n}function ce(e){const t=ue(e.buffer,e.byteOffset,e.byteOffset+e.byteLength);return new Uint8Array(t)}function de(e){const t=e._queue.shift();return e._queueTotalSize-=t.size,e._queueTotalSize<0&&(e._queueTotalSize=0),t.value}function fe(e,t,r){if("number"!=typeof(o=r)||se(o)||o<0||r===1/0)throw new RangeError("Size must be a finite, non-NaN, non-negative number.");var o;e._queue.push({value:t,size:r}),e._queueTotalSize+=r}function he(e){e._queue=new S,e._queueTotalSize=0}class pe{constructor(){throw new TypeError("Illegal constructor")}get view(){if(!me(this))throw Fe("view");return this._view}respond(e){if(!me(this))throw Fe("respond");if(M(e,1,"respond"),e=H(e,"First parameter"),void 0===this._associatedReadableByteStreamController)throw new TypeError("This BYOB request has been invalidated");this._view.buffer,ze(this._associatedReadableByteStreamController,e)}respondWithNewView(e){if(!me(this))throw Fe("respondWithNewView");if(M(e,1,"respondWithNewView"),!ArrayBuffer.isView(e))throw new TypeError("You can only respond with array buffer views");if(void 0===this._associatedReadableByteStreamController)throw new TypeError("This BYOB request has been invalidated");e.buffer,xe(this._associatedReadableByteStreamController,e)}}Object.defineProperties(pe.prototype,{respond:{enumerable:!0},respondWithNewView:{enumerable:!0},view:{enumerable:!0}}),"symbol"==typeof t.toStringTag&&Object.defineProperty(pe.prototype,t.toStringTag,{value:"ReadableStreamBYOBRequest",configurable:!0});class be{constructor(){throw new TypeError("Illegal constructor")}get byobRequest(){if(!ye(this))throw Me("byobRequest");return Le(this)}get desiredSize(){if(!ye(this))throw Me("desiredSize");return We(this)}close(){if(!ye(this))throw Me("close");if(this._closeRequested)throw new TypeError("The stream has already been closed; do not close it again!");const e=this._controlledReadableByteStream._state;if("readable"!==e)throw new TypeError(`The stream (in ${e} state) is not in the readable state and cannot be closed`);ke(this)}enqueue(e){if(!ye(this))throw Me("enqueue");if(M(e,1,"enqueue"),!ArrayBuffer.isView(e))throw new TypeError("chunk must be an array buffer view");if(0===e.byteLength)throw new TypeError("chunk must have non-zero byteLength");if(0===e.buffer.byteLength)throw new TypeError("chunk's buffer must have non-zero byteLength");if(this._closeRequested)throw new TypeError("stream is closed or draining");const t=this._controlledReadableByteStream._state;if("readable"!==t)throw new TypeError(`The stream (in ${t} state) is not in the readable state and cannot be enqueued to`);Ae(this,e)}error(e=void 0){if(!ye(this))throw Me("error");Be(this,e)}[B](e){_e(this),he(this);const t=this._cancelAlgorithm(e);return je(this),t}[L](e){const t=this._controlledReadableByteStream;if(this._queueTotalSize>0){const t=this._queue.shift();this._queueTotalSize-=t.byteLength,Ee(this);const r=new Uint8Array(t.buffer,t.byteOffset,t.byteLength);return void e._chunkSteps(r)}const r=this._autoAllocateChunkSize;if(void 0!==r){let t;try{t=new ArrayBuffer(r)}catch(t){return void e._errorSteps(t)}const o={buffer:t,bufferByteLength:r,byteOffset:0,byteLength:r,bytesFilled:0,elementSize:1,viewConstructor:Uint8Array,readerType:"default"};this._pendingPullIntos.push(o)}V(t,e),ge(this)}}function ye(e){return!!n(e)&&!!Object.prototype.hasOwnProperty.call(e,"_controlledReadableByteStream")&&e instanceof be}function me(e){return!!n(e)&&!!Object.prototype.hasOwnProperty.call(e,"_associatedReadableByteStreamController")&&e instanceof pe}function ge(e){const t=function(e){const t=e._controlledReadableByteStream;if("readable"!==t._state)return!1;if(e._closeRequested)return!1;if(!e._started)return!1;if(G(t)&&Y(t)>0)return!0;if(He(t)&&De(t)>0)return!0;return We(e)>0}(e);t&&(e._pulling?e._pullAgain=!0:(e._pulling=!0,p(e._pullAlgorithm(),(()=>{e._pulling=!1,e._pullAgain&&(e._pullAgain=!1,ge(e))}),(t=>{Be(e,t)}))))}function _e(e){Pe(e),e._pendingPullIntos=new S}function we(e,t){let r=!1;"closed"===e._state&&(r=!0);const o=ve(t);"default"===t.readerType?Q(e,o,r):function(e,t,r){const o=e._reader._readIntoRequests.shift();r?o._closeSteps(t):o._chunkSteps(t)}(e,o,r)}function ve(e){const t=e.bytesFilled,r=e.elementSize;return new e.viewConstructor(e.buffer,e.byteOffset,t/r)}function Se(e,t,r,o){e._queue.push({buffer:t,byteOffset:r,byteLength:o}),e._queueTotalSize+=o}function Te(e,t){const r=t.elementSize,o=t.bytesFilled-t.bytesFilled%r,n=Math.min(e._queueTotalSize,t.byteLength-t.bytesFilled),i=t.bytesFilled+n,s=i-i%r;let a=n,l=!1;s>o&&(a=s-t.bytesFilled,l=!0);const u=e._queue;for(;a>0;){const r=u.peek(),o=Math.min(a,r.byteLength),n=t.byteOffset+t.bytesFilled;le(t.buffer,n,r.buffer,r.byteOffset,o),r.byteLength===o?u.shift():(r.byteOffset+=o,r.byteLength-=o),e._queueTotalSize-=o,Re(0,o,t),a-=o}return l}function Re(e,t,r){r.bytesFilled+=t}function Ee(e){0===e._queueTotalSize&&e._closeRequested?(je(e),vr(e._controlledReadableByteStream)):ge(e)}function Pe(e){null!==e._byobRequest&&(e._byobRequest._associatedReadableByteStreamController=void 0,e._byobRequest._view=null,e._byobRequest=null)}function Ce(e){for(;e._pendingPullIntos.length>0;){if(0===e._queueTotalSize)return;const t=e._pendingPullIntos.peek();Te(e,t)&&(qe(e),we(e._controlledReadableByteStream,t))}}function Oe(e,t){const r=e._pendingPullIntos.peek();Pe(e),"closed"===e._controlledReadableByteStream._state?function(e,t){const r=e._controlledReadableByteStream;if(He(r))for(;De(r)>0;)we(r,qe(e))}(e):function(e,t,r){if(Re(0,t,r),r.bytesFilled<r.elementSize)return;qe(e);const o=r.bytesFilled%r.elementSize;if(o>0){const t=r.byteOffset+r.bytesFilled,n=ue(r.buffer,t-o,t);Se(e,n,0,n.byteLength)}r.bytesFilled-=o,we(e._controlledReadableByteStream,r),Ce(e)}(e,t,r),ge(e)}function qe(e){return e._pendingPullIntos.shift()}function je(e){e._pullAlgorithm=void 0,e._cancelAlgorithm=void 0}function ke(e){const t=e._controlledReadableByteStream;if(!e._closeRequested&&"readable"===t._state)if(e._queueTotalSize>0)e._closeRequested=!0;else{if(e._pendingPullIntos.length>0&&e._pendingPullIntos.peek().bytesFilled>0){const t=new TypeError("Insufficient bytes to fill elements in the given buffer");throw Be(e,t),t}je(e),vr(t)}}function Ae(e,t){const r=e._controlledReadableByteStream;if(e._closeRequested||"readable"!==r._state)return;const o=t.buffer,n=t.byteOffset,i=t.byteLength,s=o;if(e._pendingPullIntos.length>0){const t=e._pendingPullIntos.peek();t.buffer,t.buffer=t.buffer}Pe(e),G(r)?0===Y(r)?Se(e,s,n,i):(e._pendingPullIntos.length>0&&qe(e),Q(r,new Uint8Array(s,n,i),!1)):He(r)?(Se(e,s,n,i),Ce(e)):Se(e,s,n,i),ge(e)}function Be(e,t){const r=e._controlledReadableByteStream;"readable"===r._state&&(_e(e),he(e),je(e),Sr(r,t))}function Le(e){if(null===e._byobRequest&&e._pendingPullIntos.length>0){const t=e._pendingPullIntos.peek(),r=new Uint8Array(t.buffer,t.byteOffset+t.bytesFilled,t.byteLength-t.bytesFilled),o=Object.create(pe.prototype);!function(e,t,r){e._associatedReadableByteStreamController=t,e._view=r}(o,e,r),e._byobRequest=o}return e._byobRequest}function We(e){const t=e._controlledReadableByteStream._state;return"errored"===t?null:"closed"===t?0:e._strategyHWM-e._queueTotalSize}function ze(e,t){const r=e._pendingPullIntos.peek();if("closed"===e._controlledReadableByteStream._state){if(0!==t)throw new TypeError("bytesWritten must be 0 when calling respond() on a closed stream")}else{if(0===t)throw new TypeError("bytesWritten must be greater than 0 when calling respond() on a readable stream");if(r.bytesFilled+t>r.byteLength)throw new RangeError("bytesWritten out of range")}r.buffer=r.buffer,Oe(e,t)}function xe(e,t){const r=e._pendingPullIntos.peek();if("closed"===e._controlledReadableByteStream._state){if(0!==t.byteLength)throw new TypeError("The view's length must be 0 when calling respondWithNewView() on a closed stream")}else if(0===t.byteLength)throw new TypeError("The view's length must be greater than 0 when calling respondWithNewView() on a readable stream");if(r.byteOffset+r.bytesFilled!==t.byteOffset)throw new RangeError("The region specified by view does not match byobRequest");if(r.bufferByteLength!==t.buffer.byteLength)throw new RangeError("The buffer of view has different capacity than byobRequest");if(r.bytesFilled+t.byteLength>r.byteLength)throw new RangeError("The region specified by view is larger than byobRequest");const o=t.byteLength;r.buffer=t.buffer,Oe(e,o)}function $e(e,t,r,o,n,i,s){t._controlledReadableByteStream=e,t._pullAgain=!1,t._pulling=!1,t._byobRequest=null,t._queue=t._queueTotalSize=void 0,he(t),t._closeRequested=!1,t._started=!1,t._strategyHWM=i,t._pullAlgorithm=o,t._cancelAlgorithm=n,t._autoAllocateChunkSize=s,t._pendingPullIntos=new S,e._readableStreamController=t,p(d(r()),(()=>{t._started=!0,ge(t)}),(e=>{Be(t,e)}))}function Fe(e){return new TypeError(`ReadableStreamBYOBRequest.prototype.${e} can only be used on a ReadableStreamBYOBRequest`)}function Me(e){return new TypeError(`ReadableByteStreamController.prototype.${e} can only be used on a ReadableByteStreamController`)}function Ie(e){return new Ne(e)}function Ue(e,t){e._reader._readIntoRequests.push(t)}function De(e){return e._reader._readIntoRequests.length}function He(e){const t=e._reader;return void 0!==t&&!!Ze(t)}Object.defineProperties(be.prototype,{close:{enumerable:!0},enqueue:{enumerable:!0},error:{enumerable:!0},byobRequest:{enumerable:!0},desiredSize:{enumerable:!0}}),"symbol"==typeof t.toStringTag&&Object.defineProperty(be.prototype,t.toStringTag,{value:"ReadableByteStreamController",configurable:!0});class Ne{constructor(e){if(M(e,1,"ReadableStreamBYOBReader"),N(e,"First parameter"),_r(e))throw new TypeError("This stream has already been locked for exclusive reading by another reader");if(!ye(e._readableStreamController))throw new TypeError("Cannot construct a ReadableStreamBYOBReader for a stream not constructed with a byte source");T(this,e),this._readIntoRequests=new S}get closed(){return Ze(this)?this._closedPromise:f(Qe("closed"))}cancel(e=void 0){return Ze(this)?void 0===this._ownerReadableStream?f(P("cancel")):R(this,e):f(Qe("cancel"))}read(e){if(!Ze(this))return f(Qe("read"));if(!ArrayBuffer.isView(e))return f(new TypeError("view must be an array buffer view"));if(0===e.byteLength)return f(new TypeError("view must have non-zero byteLength"));if(0===e.buffer.byteLength)return f(new TypeError("view's buffer must have non-zero byteLength"));if(e.buffer,void 0===this._ownerReadableStream)return f(P("read from"));let t,r;const o=c(((e,o)=>{t=e,r=o}));return Ve(this,e,{_chunkSteps:e=>t({value:e,done:!1}),_closeSteps:e=>t({value:e,done:!0}),_errorSteps:e=>r(e)}),o}releaseLock(){if(!Ze(this))throw Qe("releaseLock");if(void 0!==this._ownerReadableStream){if(this._readIntoRequests.length>0)throw new TypeError("Tried to release a reader lock when that reader has pending read() calls un-settled");E(this)}}}function Ze(e){return!!n(e)&&!!Object.prototype.hasOwnProperty.call(e,"_readIntoRequests")&&e instanceof Ne}function Ve(e,t,r){const o=e._ownerReadableStream;o._disturbed=!0,"errored"===o._state?r._errorSteps(o._storedError):function(e,t,r){const o=e._controlledReadableByteStream;let n=1;t.constructor!==DataView&&(n=t.constructor.BYTES_PER_ELEMENT);const i=t.constructor,s=t.buffer,a={buffer:s,bufferByteLength:s.byteLength,byteOffset:t.byteOffset,byteLength:t.byteLength,bytesFilled:0,elementSize:n,viewConstructor:i,readerType:"byob"};if(e._pendingPullIntos.length>0)return e._pendingPullIntos.push(a),void Ue(o,r);if("closed"!==o._state){if(e._queueTotalSize>0){if(Te(e,a)){const t=ve(a);return Ee(e),void r._chunkSteps(t)}if(e._closeRequested){const t=new TypeError("Insufficient bytes to fill elements in the given buffer");return Be(e,t),void r._errorSteps(t)}}e._pendingPullIntos.push(a),Ue(o,r),ge(e)}else{const e=new i(a.buffer,a.byteOffset,0);r._closeSteps(e)}}(o._readableStreamController,t,r)}function Qe(e){return new TypeError(`ReadableStreamBYOBReader.prototype.${e} can only be used on a ReadableStreamBYOBReader`)}function Ye(e,t){const{highWaterMark:r}=e;if(void 0===r)return t;if(se(r)||r<0)throw new RangeError("Invalid highWaterMark");return r}function Ge(e){const{size:t}=e;return t||(()=>1)}function Je(e,t){x(e,t);const r=null==e?void 0:e.highWaterMark,o=null==e?void 0:e.size;return{highWaterMark:void 0===r?void 0:U(r),size:void 0===o?void 0:Ke(o,`${t} has member 'size' that`)}}function Ke(e,t){return $(e,t),t=>U(e(t))}function Xe(e,t,r){return $(e,r),r=>v(e,t,[r])}function et(e,t,r){return $(e,r),()=>v(e,t,[])}function tt(e,t,r){return $(e,r),r=>w(e,t,[r])}function rt(e,t,r){return $(e,r),(r,o)=>v(e,t,[r,o])}function ot(e,t){if(!lt(e))throw new TypeError(`${t} is not a WritableStream.`)}Object.defineProperties(Ne.prototype,{cancel:{enumerable:!0},read:{enumerable:!0},releaseLock:{enumerable:!0},closed:{enumerable:!0}}),"symbol"==typeof t.toStringTag&&Object.defineProperty(Ne.prototype,t.toStringTag,{value:"ReadableStreamBYOBReader",configurable:!0});const nt="function"==typeof AbortController;class it{constructor(e={},t={}){void 0===e?e=null:F(e,"First parameter");const r=Je(t,"Second parameter"),o=function(e,t){x(e,t);const r=null==e?void 0:e.abort,o=null==e?void 0:e.close,n=null==e?void 0:e.start,i=null==e?void 0:e.type,s=null==e?void 0:e.write;return{abort:void 0===r?void 0:Xe(r,e,`${t} has member 'abort' that`),close:void 0===o?void 0:et(o,e,`${t} has member 'close' that`),start:void 0===n?void 0:tt(n,e,`${t} has member 'start' that`),write:void 0===s?void 0:rt(s,e,`${t} has member 'write' that`),type:i}}(e,"First parameter");if(at(this),void 0!==o.type)throw new RangeError("Invalid type is specified");const n=Ge(r);!function(e,t,r,o){const n=Object.create(Et.prototype);let i=()=>{},s=()=>d(void 0),a=()=>d(void 0),l=()=>d(void 0);void 0!==t.start&&(i=()=>t.start(n)),void 0!==t.write&&(s=e=>t.write(e,n)),void 0!==t.close&&(a=()=>t.close()),void 0!==t.abort&&(l=e=>t.abort(e)),Ct(e,n,i,s,a,l,r,o)}(this,o,Ye(r,1),n)}get locked(){if(!lt(this))throw Lt("locked");return ut(this)}abort(e=void 0){return lt(this)?ut(this)?f(new TypeError("Cannot abort a stream that already has a writer")):ct(this,e):f(Lt("abort"))}close(){return lt(this)?ut(this)?f(new TypeError("Cannot close a stream that already has a writer")):bt(this)?f(new TypeError("Cannot close an already-closing stream")):dt(this):f(Lt("close"))}getWriter(){if(!lt(this))throw Lt("getWriter");return st(this)}}function st(e){return new gt(e)}function at(e){e._state="writable",e._storedError=void 0,e._writer=void 0,e._writableStreamController=void 0,e._writeRequests=new S,e._inFlightWriteRequest=void 0,e._closeRequest=void 0,e._inFlightCloseRequest=void 0,e._pendingAbortRequest=void 0,e._backpressure=!1}function lt(e){return!!n(e)&&!!Object.prototype.hasOwnProperty.call(e,"_writableStreamController")&&e instanceof it}function ut(e){return void 0!==e._writer}function ct(e,t){var r;if("closed"===e._state||"errored"===e._state)return d(void 0);e._writableStreamController._abortReason=t,null===(r=e._writableStreamController._abortController)||void 0===r||r.abort();const o=e._state;if("closed"===o||"errored"===o)return d(void 0);if(void 0!==e._pendingAbortRequest)return e._pendingAbortRequest._promise;let n=!1;"erroring"===o&&(n=!0,t=void 0);const i=c(((r,o)=>{e._pendingAbortRequest={_promise:void 0,_resolve:r,_reject:o,_reason:t,_wasAlreadyErroring:n}}));return e._pendingAbortRequest._promise=i,n||ht(e,t),i}function dt(e){const t=e._state;if("closed"===t||"errored"===t)return f(new TypeError(`The stream (in ${t} state) is not in the writable state and cannot be closed`));const r=c(((t,r)=>{const o={_resolve:t,_reject:r};e._closeRequest=o})),o=e._writer;var n;return void 0!==o&&e._backpressure&&"writable"===t&&Zt(o),fe(n=e._writableStreamController,Rt,0),jt(n),r}function ft(e,t){"writable"!==e._state?pt(e):ht(e,t)}function ht(e,t){const r=e._writableStreamController;e._state="erroring",e._storedError=t;const o=e._writer;void 0!==o&&vt(o,t),!function(e){return void 0!==e._inFlightWriteRequest||void 0!==e._inFlightCloseRequest}(e)&&r._started&&pt(e)}function pt(e){e._state="errored",e._writableStreamController[A]();const t=e._storedError;if(e._writeRequests.forEach((e=>{e._reject(t)})),e._writeRequests=new S,void 0===e._pendingAbortRequest)return void yt(e);const r=e._pendingAbortRequest;if(e._pendingAbortRequest=void 0,r._wasAlreadyErroring)return r._reject(t),void yt(e);p(e._writableStreamController[k](r._reason),(()=>{r._resolve(),yt(e)}),(t=>{r._reject(t),yt(e)}))}function bt(e){return void 0!==e._closeRequest||void 0!==e._inFlightCloseRequest}function yt(e){void 0!==e._closeRequest&&(e._closeRequest._reject(e._storedError),e._closeRequest=void 0);const t=e._writer;void 0!==t&&Mt(t,e._storedError)}function mt(e,t){const r=e._writer;void 0!==r&&t!==e._backpressure&&(t?function(e){Ut(e)}(r):Zt(r)),e._backpressure=t}Object.defineProperties(it.prototype,{abort:{enumerable:!0},close:{enumerable:!0},getWriter:{enumerable:!0},locked:{enumerable:!0}}),"symbol"==typeof t.toStringTag&&Object.defineProperty(it.prototype,t.toStringTag,{value:"WritableStream",configurable:!0});class gt{constructor(e){if(M(e,1,"WritableStreamDefaultWriter"),ot(e,"First parameter"),ut(e))throw new TypeError("This stream has already been locked for exclusive writing by another writer");this._ownerWritableStream=e,e._writer=this;const t=e._state;if("writable"===t)!bt(e)&&e._backpressure?Ut(this):Ht(this),$t(this);else if("erroring"===t)Dt(this,e._storedError),$t(this);else if("closed"===t)Ht(this),$t(this),It(this);else{const t=e._storedError;Dt(this,t),Ft(this,t)}}get closed(){return _t(this)?this._closedPromise:f(zt("closed"))}get desiredSize(){if(!_t(this))throw zt("desiredSize");if(void 0===this._ownerWritableStream)throw xt("desiredSize");return function(e){const t=e._ownerWritableStream,r=t._state;return"errored"===r||"erroring"===r?null:"closed"===r?0:qt(t._writableStreamController)}(this)}get ready(){return _t(this)?this._readyPromise:f(zt("ready"))}abort(e=void 0){return _t(this)?void 0===this._ownerWritableStream?f(xt("abort")):function(e,t){return ct(e._ownerWritableStream,t)}(this,e):f(zt("abort"))}close(){if(!_t(this))return f(zt("close"));const e=this._ownerWritableStream;return void 0===e?f(xt("close")):bt(e)?f(new TypeError("Cannot close an already-closing stream")):wt(this)}releaseLock(){if(!_t(this))throw zt("releaseLock");void 0!==this._ownerWritableStream&&St(this)}write(e=void 0){return _t(this)?void 0===this._ownerWritableStream?f(xt("write to")):Tt(this,e):f(zt("write"))}}function _t(e){return!!n(e)&&!!Object.prototype.hasOwnProperty.call(e,"_ownerWritableStream")&&e instanceof gt}function wt(e){return dt(e._ownerWritableStream)}function vt(e,t){"pending"===e._readyPromiseState?Nt(e,t):function(e,t){Dt(e,t)}(e,t)}function St(e){const t=e._ownerWritableStream,r=new TypeError("Writer was released and can no longer be used to monitor the stream's closedness");vt(e,r),function(e,t){"pending"===e._closedPromiseState?Mt(e,t):function(e,t){Ft(e,t)}(e,t)}(e,r),t._writer=void 0,e._ownerWritableStream=void 0}function Tt(e,t){const r=e._ownerWritableStream,o=r._writableStreamController,n=function(e,t){try{return e._strategySizeAlgorithm(t)}catch(t){return kt(e,t),1}}(o,t);if(r!==e._ownerWritableStream)return f(xt("write to"));const i=r._state;if("errored"===i)return f(r._storedError);if(bt(r)||"closed"===i)return f(new TypeError("The stream is closing or closed and cannot be written to"));if("erroring"===i)return f(r._storedError);const s=function(e){return c(((t,r)=>{const o={_resolve:t,_reject:r};e._writeRequests.push(o)}))}(r);return function(e,t,r){try{fe(e,t,r)}catch(t){return void kt(e,t)}const o=e._controlledWritableStream;bt(o)||"writable"!==o._state||mt(o,At(e)),jt(e)}(o,t,n),s}Object.defineProperties(gt.prototype,{abort:{enumerable:!0},close:{enumerable:!0},releaseLock:{enumerable:!0},write:{enumerable:!0},closed:{enumerable:!0},desiredSize:{enumerable:!0},ready:{enumerable:!0}}),"symbol"==typeof t.toStringTag&&Object.defineProperty(gt.prototype,t.toStringTag,{value:"WritableStreamDefaultWriter",configurable:!0});const Rt={};class Et{constructor(){throw new TypeError("Illegal constructor")}get abortReason(){if(!Pt(this))throw Wt("abortReason");return this._abortReason}get signal(){if(!Pt(this))throw Wt("signal");if(void 0===this._abortController)throw new TypeError("WritableStreamDefaultController.prototype.signal is not supported");return this._abortController.signal}error(e=void 0){if(!Pt(this))throw Wt("error");"writable"===this._controlledWritableStream._state&&Bt(this,e)}[k](e){const t=this._abortAlgorithm(e);return Ot(this),t}[A](){he(this)}}function Pt(e){return!!n(e)&&!!Object.prototype.hasOwnProperty.call(e,"_controlledWritableStream")&&e instanceof Et}function Ct(e,t,r,o,n,i,s,a){t._controlledWritableStream=e,e._writableStreamController=t,t._queue=void 0,t._queueTotalSize=void 0,he(t),t._abortReason=void 0,t._abortController=function(){if(nt)return new AbortController}(),t._started=!1,t._strategySizeAlgorithm=a,t._strategyHWM=s,t._writeAlgorithm=o,t._closeAlgorithm=n,t._abortAlgorithm=i;const l=At(t);mt(e,l),p(d(r()),(()=>{t._started=!0,jt(t)}),(r=>{t._started=!0,ft(e,r)}))}function Ot(e){e._writeAlgorithm=void 0,e._closeAlgorithm=void 0,e._abortAlgorithm=void 0,e._strategySizeAlgorithm=void 0}function qt(e){return e._strategyHWM-e._queueTotalSize}function jt(e){const t=e._controlledWritableStream;if(!e._started)return;if(void 0!==t._inFlightWriteRequest)return;if("erroring"===t._state)return void pt(t);if(0===e._queue.length)return;const r=e._queue.peek().value;r===Rt?function(e){const t=e._controlledWritableStream;(function(e){e._inFlightCloseRequest=e._closeRequest,e._closeRequest=void 0})(t),de(e);const r=e._closeAlgorithm();Ot(e),p(r,(()=>{!function(e){e._inFlightCloseRequest._resolve(void 0),e._inFlightCloseRequest=void 0,"erroring"===e._state&&(e._storedError=void 0,void 0!==e._pendingAbortRequest&&(e._pendingAbortRequest._resolve(),e._pendingAbortRequest=void 0)),e._state="closed";const t=e._writer;void 0!==t&&It(t)}(t)}),(e=>{!function(e,t){e._inFlightCloseRequest._reject(t),e._inFlightCloseRequest=void 0,void 0!==e._pendingAbortRequest&&(e._pendingAbortRequest._reject(t),e._pendingAbortRequest=void 0),ft(e,t)}(t,e)}))}(e):function(e,t){const r=e._controlledWritableStream;!function(e){e._inFlightWriteRequest=e._writeRequests.shift()}(r);p(e._writeAlgorithm(t),(()=>{!function(e){e._inFlightWriteRequest._resolve(void 0),e._inFlightWriteRequest=void 0}(r);const t=r._state;if(de(e),!bt(r)&&"writable"===t){const t=At(e);mt(r,t)}jt(e)}),(t=>{"writable"===r._state&&Ot(e),function(e,t){e._inFlightWriteRequest._reject(t),e._inFlightWriteRequest=void 0,ft(e,t)}(r,t)}))}(e,r)}function kt(e,t){"writable"===e._controlledWritableStream._state&&Bt(e,t)}function At(e){return qt(e)<=0}function Bt(e,t){const r=e._controlledWritableStream;Ot(e),ht(r,t)}function Lt(e){return new TypeError(`WritableStream.prototype.${e} can only be used on a WritableStream`)}function Wt(e){return new TypeError(`WritableStreamDefaultController.prototype.${e} can only be used on a WritableStreamDefaultController`)}function zt(e){return new TypeError(`WritableStreamDefaultWriter.prototype.${e} can only be used on a WritableStreamDefaultWriter`)}function xt(e){return new TypeError("Cannot "+e+" a stream using a released writer")}function $t(e){e._closedPromise=c(((t,r)=>{e._closedPromise_resolve=t,e._closedPromise_reject=r,e._closedPromiseState="pending"}))}function Ft(e,t){$t(e),Mt(e,t)}function Mt(e,t){void 0!==e._closedPromise_reject&&(g(e._closedPromise),e._closedPromise_reject(t),e._closedPromise_resolve=void 0,e._closedPromise_reject=void 0,e._closedPromiseState="rejected")}function It(e){void 0!==e._closedPromise_resolve&&(e._closedPromise_resolve(void 0),e._closedPromise_resolve=void 0,e._closedPromise_reject=void 0,e._closedPromiseState="resolved")}function Ut(e){e._readyPromise=c(((t,r)=>{e._readyPromise_resolve=t,e._readyPromise_reject=r})),e._readyPromiseState="pending"}function Dt(e,t){Ut(e),Nt(e,t)}function Ht(e){Ut(e),Zt(e)}function Nt(e,t){void 0!==e._readyPromise_reject&&(g(e._readyPromise),e._readyPromise_reject(t),e._readyPromise_resolve=void 0,e._readyPromise_reject=void 0,e._readyPromiseState="rejected")}function Zt(e){void 0!==e._readyPromise_resolve&&(e._readyPromise_resolve(void 0),e._readyPromise_resolve=void 0,e._readyPromise_reject=void 0,e._readyPromiseState="fulfilled")}Object.defineProperties(Et.prototype,{abortReason:{enumerable:!0},signal:{enumerable:!0},error:{enumerable:!0}}),"symbol"==typeof t.toStringTag&&Object.defineProperty(Et.prototype,t.toStringTag,{value:"WritableStreamDefaultController",configurable:!0});const Vt="undefined"!=typeof DOMException?DOMException:void 0,Qt=function(e){if("function"!=typeof e&&"object"!=typeof e)return!1;try{return new e,!0}catch(e){return!1}}(Vt)?Vt:function(){const e=function(e,t){this.message=e||"",this.name=t||"Error",Error.captureStackTrace&&Error.captureStackTrace(this,this.constructor)};return e.prototype=Object.create(Error.prototype),Object.defineProperty(e.prototype,"constructor",{value:e,writable:!0,configurable:!0}),e}();function Yt(e,t,o,n,i,s){const a=Z(e),l=st(t);e._disturbed=!0;let u=!1,m=d(void 0);return c(((_,w)=>{let v;if(void 0!==s){if(v=()=>{const r=new Qt("Aborted","AbortError"),o=[];n||o.push((()=>"writable"===t._state?ct(t,r):d(void 0))),i||o.push((()=>"readable"===e._state?wr(e,r):d(void 0))),O((()=>Promise.all(o.map((e=>e())))),!0,r)},s.aborted)return void v();s.addEventListener("abort",v)}var S,T,R;if(C(e,a._closedPromise,(e=>{n?q(!0,e):O((()=>ct(t,e)),!0,e)})),C(t,l._closedPromise,(t=>{i?q(!0,t):O((()=>wr(e,t)),!0,t)})),S=e,T=a._closedPromise,R=()=>{o?q():O((()=>function(e){const t=e._ownerWritableStream,r=t._state;return bt(t)||"closed"===r?d(void 0):"errored"===r?f(t._storedError):wt(e)}(l)))},"closed"===S._state?R():b(T,R),bt(t)||"closed"===t._state){const t=new TypeError("the destination writable stream closed before all data could be piped to it");i?q(!0,t):O((()=>wr(e,t)),!0,t)}function P(){const e=m;return h(m,(()=>e!==m?P():void 0))}function C(e,t,r){"errored"===e._state?r(e._storedError):y(t,r)}function O(e,r,o){function n(){p(e(),(()=>j(r,o)),(e=>j(!0,e)))}u||(u=!0,"writable"!==t._state||bt(t)?n():b(P(),n))}function q(e,r){u||(u=!0,"writable"!==t._state||bt(t)?j(e,r):b(P(),(()=>j(e,r))))}function j(e,t){St(l),E(a),void 0!==s&&s.removeEventListener("abort",v),e?w(t):_(void 0)}g(c(((e,t)=>{!function o(n){n?e():h(u?d(!0):h(l._readyPromise,(()=>c(((e,t)=>{X(a,{_chunkSteps:t=>{m=h(Tt(l,t),void 0,r),e(!1)},_closeSteps:()=>e(!0),_errorSteps:t})})))),o,t)}(!1)})))}))}class Gt{constructor(){throw new TypeError("Illegal constructor")}get desiredSize(){if(!Jt(this))throw ar("desiredSize");return nr(this)}close(){if(!Jt(this))throw ar("close");if(!ir(this))throw new TypeError("The stream is not in a state that permits close");tr(this)}enqueue(e=void 0){if(!Jt(this))throw ar("enqueue");if(!ir(this))throw new TypeError("The stream is not in a state that permits enqueue");return rr(this,e)}error(e=void 0){if(!Jt(this))throw ar("error");or(this,e)}[B](e){he(this);const t=this._cancelAlgorithm(e);return er(this),t}[L](e){const t=this._controlledReadableStream;if(this._queue.length>0){const r=de(this);this._closeRequested&&0===this._queue.length?(er(this),vr(t)):Kt(this),e._chunkSteps(r)}else V(t,e),Kt(this)}}function Jt(e){return!!n(e)&&!!Object.prototype.hasOwnProperty.call(e,"_controlledReadableStream")&&e instanceof Gt}function Kt(e){Xt(e)&&(e._pulling?e._pullAgain=!0:(e._pulling=!0,p(e._pullAlgorithm(),(()=>{e._pulling=!1,e._pullAgain&&(e._pullAgain=!1,Kt(e))}),(t=>{or(e,t)}))))}function Xt(e){const t=e._controlledReadableStream;return!!ir(e)&&!!e._started&&(!!(_r(t)&&Y(t)>0)||nr(e)>0)}function er(e){e._pullAlgorithm=void 0,e._cancelAlgorithm=void 0,e._strategySizeAlgorithm=void 0}function tr(e){if(!ir(e))return;const t=e._controlledReadableStream;e._closeRequested=!0,0===e._queue.length&&(er(e),vr(t))}function rr(e,t){if(!ir(e))return;const r=e._controlledReadableStream;if(_r(r)&&Y(r)>0)Q(r,t,!1);else{let r;try{r=e._strategySizeAlgorithm(t)}catch(t){throw or(e,t),t}try{fe(e,t,r)}catch(t){throw or(e,t),t}}Kt(e)}function or(e,t){const r=e._controlledReadableStream;"readable"===r._state&&(he(e),er(e),Sr(r,t))}function nr(e){const t=e._controlledReadableStream._state;return"errored"===t?null:"closed"===t?0:e._strategyHWM-e._queueTotalSize}function ir(e){const t=e._controlledReadableStream._state;return!e._closeRequested&&"readable"===t}function sr(e,t,r,o,n,i,s){t._controlledReadableStream=e,t._queue=void 0,t._queueTotalSize=void 0,he(t),t._started=!1,t._closeRequested=!1,t._pullAgain=!1,t._pulling=!1,t._strategySizeAlgorithm=s,t._strategyHWM=i,t._pullAlgorithm=o,t._cancelAlgorithm=n,e._readableStreamController=t,p(d(r()),(()=>{t._started=!0,Kt(t)}),(e=>{or(t,e)}))}function ar(e){return new TypeError(`ReadableStreamDefaultController.prototype.${e} can only be used on a ReadableStreamDefaultController`)}function lr(e,t,r){return $(e,r),r=>v(e,t,[r])}function ur(e,t,r){return $(e,r),r=>v(e,t,[r])}function cr(e,t,r){return $(e,r),r=>w(e,t,[r])}function dr(e,t){if("bytes"!=(e=`${e}`))throw new TypeError(`${t} '${e}' is not a valid enumeration value for ReadableStreamType`);return e}function fr(e,t){if("byob"!=(e=`${e}`))throw new TypeError(`${t} '${e}' is not a valid enumeration value for ReadableStreamReaderMode`);return e}function hr(e,t){x(e,t);const r=null==e?void 0:e.preventAbort,o=null==e?void 0:e.preventCancel,n=null==e?void 0:e.preventClose,i=null==e?void 0:e.signal;return void 0!==i&&function(e,t){if(!function(e){if("object"!=typeof e||null===e)return!1;try{return"boolean"==typeof e.aborted}catch(e){return!1}}(e))throw new TypeError(`${t} is not an AbortSignal.`)}(i,`${t} has member 'signal' that`),{preventAbort:Boolean(r),preventCancel:Boolean(o),preventClose:Boolean(n),signal:i}}Object.defineProperties(Gt.prototype,{close:{enumerable:!0},enqueue:{enumerable:!0},error:{enumerable:!0},desiredSize:{enumerable:!0}}),"symbol"==typeof t.toStringTag&&Object.defineProperty(Gt.prototype,t.toStringTag,{value:"ReadableStreamDefaultController",configurable:!0});class pr{constructor(e={},t={}){void 0===e?e=null:F(e,"First parameter");const r=Je(t,"Second parameter"),o=function(e,t){x(e,t);const r=e,o=null==r?void 0:r.autoAllocateChunkSize,n=null==r?void 0:r.cancel,i=null==r?void 0:r.pull,s=null==r?void 0:r.start,a=null==r?void 0:r.type;return{autoAllocateChunkSize:void 0===o?void 0:H(o,`${t} has member 'autoAllocateChunkSize' that`),cancel:void 0===n?void 0:lr(n,r,`${t} has member 'cancel' that`),pull:void 0===i?void 0:ur(i,r,`${t} has member 'pull' that`),start:void 0===s?void 0:cr(s,r,`${t} has member 'start' that`),type:void 0===a?void 0:dr(a,`${t} has member 'type' that`)}}(e,"First parameter");if(mr(this),"bytes"===o.type){if(void 0!==r.size)throw new RangeError("The strategy for a byte stream cannot have a size function");!function(e,t,r){const o=Object.create(be.prototype);let n=()=>{},i=()=>d(void 0),s=()=>d(void 0);void 0!==t.start&&(n=()=>t.start(o)),void 0!==t.pull&&(i=()=>t.pull(o)),void 0!==t.cancel&&(s=e=>t.cancel(e));const a=t.autoAllocateChunkSize;if(0===a)throw new TypeError("autoAllocateChunkSize must be greater than 0");$e(e,o,n,i,s,r,a)}(this,o,Ye(r,0))}else{const e=Ge(r);!function(e,t,r,o){const n=Object.create(Gt.prototype);let i=()=>{},s=()=>d(void 0),a=()=>d(void 0);void 0!==t.start&&(i=()=>t.start(n)),void 0!==t.pull&&(s=()=>t.pull(n)),void 0!==t.cancel&&(a=e=>t.cancel(e)),sr(e,n,i,s,a,r,o)}(this,o,Ye(r,1),e)}}get locked(){if(!gr(this))throw Tr("locked");return _r(this)}cancel(e=void 0){return gr(this)?_r(this)?f(new TypeError("Cannot cancel a stream that already has a reader")):wr(this,e):f(Tr("cancel"))}getReader(e=void 0){if(!gr(this))throw Tr("getReader");return void 0===function(e,t){x(e,t);const r=null==e?void 0:e.mode;return{mode:void 0===r?void 0:fr(r,`${t} has member 'mode' that`)}}(e,"First parameter").mode?Z(this):Ie(this)}pipeThrough(e,t={}){if(!gr(this))throw Tr("pipeThrough");M(e,1,"pipeThrough");const r=function(e,t){x(e,t);const r=null==e?void 0:e.readable;I(r,"readable","ReadableWritablePair"),N(r,`${t} has member 'readable' that`);const o=null==e?void 0:e.writable;return I(o,"writable","ReadableWritablePair"),ot(o,`${t} has member 'writable' that`),{readable:r,writable:o}}(e,"First parameter"),o=hr(t,"Second parameter");if(_r(this))throw new TypeError("ReadableStream.prototype.pipeThrough cannot be used on a locked ReadableStream");if(ut(r.writable))throw new TypeError("ReadableStream.prototype.pipeThrough cannot be used on a locked WritableStream");return g(Yt(this,r.writable,o.preventClose,o.preventAbort,o.preventCancel,o.signal)),r.readable}pipeTo(e,t={}){if(!gr(this))return f(Tr("pipeTo"));if(void 0===e)return f("Parameter 1 is required in 'pipeTo'.");if(!lt(e))return f(new TypeError("ReadableStream.prototype.pipeTo's first argument must be a WritableStream"));let r;try{r=hr(t,"Second parameter")}catch(e){return f(e)}return _r(this)?f(new TypeError("ReadableStream.prototype.pipeTo cannot be used on a locked ReadableStream")):ut(e)?f(new TypeError("ReadableStream.prototype.pipeTo cannot be used on a locked WritableStream")):Yt(this,e,r.preventClose,r.preventAbort,r.preventCancel,r.signal)}tee(){if(!gr(this))throw Tr("tee");return ae(ye((e=this)._readableStreamController)?function(e){let t,r,o,n,i,s=Z(e),a=!1,l=!1,u=!1,f=!1,h=!1;const p=c((e=>{i=e}));function b(e){y(e._closedPromise,(t=>{e===s&&(Be(o._readableStreamController,t),Be(n._readableStreamController,t),f&&h||i(void 0))}))}function m(){Ze(s)&&(E(s),s=Z(e),b(s)),X(s,{_chunkSteps:t=>{_((()=>{l=!1,u=!1;const r=t;let s=t;if(!f&&!h)try{s=ce(t)}catch(t){return Be(o._readableStreamController,t),Be(n._readableStreamController,t),void i(wr(e,t))}f||Ae(o._readableStreamController,r),h||Ae(n._readableStreamController,s),a=!1,l?w():u&&v()}))},_closeSteps:()=>{a=!1,f||ke(o._readableStreamController),h||ke(n._readableStreamController),o._readableStreamController._pendingPullIntos.length>0&&ze(o._readableStreamController,0),n._readableStreamController._pendingPullIntos.length>0&&ze(n._readableStreamController,0),f&&h||i(void 0)},_errorSteps:()=>{a=!1}})}function g(t,r){K(s)&&(E(s),s=Ie(e),b(s));const c=r?n:o,d=r?o:n;Ve(s,t,{_chunkSteps:t=>{_((()=>{l=!1,u=!1;const o=r?h:f;if(r?f:h)o||xe(c._readableStreamController,t);else{let r;try{r=ce(t)}catch(t){return Be(c._readableStreamController,t),Be(d._readableStreamController,t),void i(wr(e,t))}o||xe(c._readableStreamController,t),Ae(d._readableStreamController,r)}a=!1,l?w():u&&v()}))},_closeSteps:e=>{a=!1;const t=r?h:f,o=r?f:h;t||ke(c._readableStreamController),o||ke(d._readableStreamController),void 0!==e&&(t||xe(c._readableStreamController,e),!o&&d._readableStreamController._pendingPullIntos.length>0&&ze(d._readableStreamController,0)),t&&o||i(void 0)},_errorSteps:()=>{a=!1}})}function w(){if(a)return l=!0,d(void 0);a=!0;const e=Le(o._readableStreamController);return null===e?m():g(e._view,!1),d(void 0)}function v(){if(a)return u=!0,d(void 0);a=!0;const e=Le(n._readableStreamController);return null===e?m():g(e._view,!0),d(void 0)}function S(){}return o=yr(S,w,(function(o){if(f=!0,t=o,h){const o=ae([t,r]),n=wr(e,o);i(n)}return p})),n=yr(S,v,(function(o){if(h=!0,r=o,f){const o=ae([t,r]),n=wr(e,o);i(n)}return p})),b(s),[o,n]}(e):function(e,t){const r=Z(e);let o,n,i,s,a,l=!1,u=!1,f=!1,h=!1;const p=c((e=>{a=e}));function b(){return l?(u=!0,d(void 0)):(l=!0,X(r,{_chunkSteps:e=>{_((()=>{u=!1;const t=e,r=e;f||rr(i._readableStreamController,t),h||rr(s._readableStreamController,r),l=!1,u&&b()}))},_closeSteps:()=>{l=!1,f||tr(i._readableStreamController),h||tr(s._readableStreamController),f&&h||a(void 0)},_errorSteps:()=>{l=!1}}),d(void 0))}function m(){}return i=br(m,b,(function(t){if(f=!0,o=t,h){const t=ae([o,n]),r=wr(e,t);a(r)}return p})),s=br(m,b,(function(t){if(h=!0,n=t,f){const t=ae([o,n]),r=wr(e,t);a(r)}return p})),y(r._closedPromise,(e=>{or(i._readableStreamController,e),or(s._readableStreamController,e),f&&h||a(void 0)})),[i,s]}(e));var e}values(e=void 0){if(!gr(this))throw Tr("values");return function(e,t){const r=Z(e),o=new re(r,t),n=Object.create(oe);return n._asyncIteratorImpl=o,n}(this,function(e,t){x(e,"First parameter");const r=null==e?void 0:e.preventCancel;return{preventCancel:Boolean(r)}}(e).preventCancel)}}function br(e,t,r,o=1,n=(()=>1)){const i=Object.create(pr.prototype);return mr(i),sr(i,Object.create(Gt.prototype),e,t,r,o,n),i}function yr(e,t,r){const o=Object.create(pr.prototype);return mr(o),$e(o,Object.create(be.prototype),e,t,r,0,void 0),o}function mr(e){e._state="readable",e._reader=void 0,e._storedError=void 0,e._disturbed=!1}function gr(e){return!!n(e)&&!!Object.prototype.hasOwnProperty.call(e,"_readableStreamController")&&e instanceof pr}function _r(e){return void 0!==e._reader}function wr(e,t){if(e._disturbed=!0,"closed"===e._state)return d(void 0);if("errored"===e._state)return f(e._storedError);vr(e);const o=e._reader;return void 0!==o&&Ze(o)&&(o._readIntoRequests.forEach((e=>{e._closeSteps(void 0)})),o._readIntoRequests=new S),m(e._readableStreamController[B](t),r)}function vr(e){e._state="closed";const t=e._reader;void 0!==t&&(j(t),K(t)&&(t._readRequests.forEach((e=>{e._closeSteps()})),t._readRequests=new S))}function Sr(e,t){e._state="errored",e._storedError=t;const r=e._reader;void 0!==r&&(q(r,t),K(r)?(r._readRequests.forEach((e=>{e._errorSteps(t)})),r._readRequests=new S):(r._readIntoRequests.forEach((e=>{e._errorSteps(t)})),r._readIntoRequests=new S))}function Tr(e){return new TypeError(`ReadableStream.prototype.${e} can only be used on a ReadableStream`)}function Rr(e,t){x(e,t);const r=null==e?void 0:e.highWaterMark;return I(r,"highWaterMark","QueuingStrategyInit"),{highWaterMark:U(r)}}Object.defineProperties(pr.prototype,{cancel:{enumerable:!0},getReader:{enumerable:!0},pipeThrough:{enumerable:!0},pipeTo:{enumerable:!0},tee:{enumerable:!0},values:{enumerable:!0},locked:{enumerable:!0}}),"symbol"==typeof t.toStringTag&&Object.defineProperty(pr.prototype,t.toStringTag,{value:"ReadableStream",configurable:!0}),"symbol"==typeof t.asyncIterator&&Object.defineProperty(pr.prototype,t.asyncIterator,{value:pr.prototype.values,writable:!0,configurable:!0});const Er=e=>e.byteLength;try{Object.defineProperty(Er,"name",{value:"size",configurable:!0})}catch(e){}class Pr{constructor(e){M(e,1,"ByteLengthQueuingStrategy"),e=Rr(e,"First parameter"),this._byteLengthQueuingStrategyHighWaterMark=e.highWaterMark}get highWaterMark(){if(!Or(this))throw Cr("highWaterMark");return this._byteLengthQueuingStrategyHighWaterMark}get size(){if(!Or(this))throw Cr("size");return Er}}function Cr(e){return new TypeError(`ByteLengthQueuingStrategy.prototype.${e} can only be used on a ByteLengthQueuingStrategy`)}function Or(e){return!!n(e)&&!!Object.prototype.hasOwnProperty.call(e,"_byteLengthQueuingStrategyHighWaterMark")&&e instanceof Pr}Object.defineProperties(Pr.prototype,{highWaterMark:{enumerable:!0},size:{enumerable:!0}}),"symbol"==typeof t.toStringTag&&Object.defineProperty(Pr.prototype,t.toStringTag,{value:"ByteLengthQueuingStrategy",configurable:!0});const qr=()=>1;try{Object.defineProperty(qr,"name",{value:"size",configurable:!0})}catch(e){}class jr{constructor(e){M(e,1,"CountQueuingStrategy"),e=Rr(e,"First parameter"),this._countQueuingStrategyHighWaterMark=e.highWaterMark}get highWaterMark(){if(!Ar(this))throw kr("highWaterMark");return this._countQueuingStrategyHighWaterMark}get size(){if(!Ar(this))throw kr("size");return qr}}function kr(e){return new TypeError(`CountQueuingStrategy.prototype.${e} can only be used on a CountQueuingStrategy`)}function Ar(e){return!!n(e)&&!!Object.prototype.hasOwnProperty.call(e,"_countQueuingStrategyHighWaterMark")&&e instanceof jr}function Br(e,t,r){return $(e,r),r=>v(e,t,[r])}function Lr(e,t,r){return $(e,r),r=>w(e,t,[r])}function Wr(e,t,r){return $(e,r),(r,o)=>v(e,t,[r,o])}Object.defineProperties(jr.prototype,{highWaterMark:{enumerable:!0},size:{enumerable:!0}}),"symbol"==typeof t.toStringTag&&Object.defineProperty(jr.prototype,t.toStringTag,{value:"CountQueuingStrategy",configurable:!0});class zr{constructor(e={},t={},r={}){void 0===e&&(e=null);const o=Je(t,"Second parameter"),n=Je(r,"Third parameter"),i=function(e,t){x(e,t);const r=null==e?void 0:e.flush,o=null==e?void 0:e.readableType,n=null==e?void 0:e.start,i=null==e?void 0:e.transform,s=null==e?void 0:e.writableType;return{flush:void 0===r?void 0:Br(r,e,`${t} has member 'flush' that`),readableType:o,start:void 0===n?void 0:Lr(n,e,`${t} has member 'start' that`),transform:void 0===i?void 0:Wr(i,e,`${t} has member 'transform' that`),writableType:s}}(e,"First parameter");if(void 0!==i.readableType)throw new RangeError("Invalid readableType specified");if(void 0!==i.writableType)throw new RangeError("Invalid writableType specified");const s=Ye(n,0),a=Ge(n),l=Ye(o,1),u=Ge(o);let h;!function(e,t,r,o,n,i){function s(){return t}e._writable=function(e,t,r,o,n=1,i=(()=>1)){const s=Object.create(it.prototype);return at(s),Ct(s,Object.create(Et.prototype),e,t,r,o,n,i),s}(s,(function(t){return function(e,t){const r=e._transformStreamController;return e._backpressure?m(e._backpressureChangePromise,(()=>{const o=e._writable;if("erroring"===o._state)throw o._storedError;return Nr(r,t)})):Nr(r,t)}(e,t)}),(function(){return function(e){const t=e._readable,r=e._transformStreamController,o=r._flushAlgorithm();return Dr(r),m(o,(()=>{if("errored"===t._state)throw t._storedError;tr(t._readableStreamController)}),(r=>{throw $r(e,r),t._storedError}))}(e)}),(function(t){return function(e,t){return $r(e,t),d(void 0)}(e,t)}),r,o),e._readable=br(s,(function(){return function(e){return Mr(e,!1),e._backpressureChangePromise}(e)}),(function(t){return Fr(e,t),d(void 0)}),n,i),e._backpressure=void 0,e._backpressureChangePromise=void 0,e._backpressureChangePromise_resolve=void 0,Mr(e,!0),e._transformStreamController=void 0}(this,c((e=>{h=e})),l,u,s,a),function(e,t){const r=Object.create(Ir.prototype);let o=e=>{try{return Hr(r,e),d(void 0)}catch(e){return f(e)}},n=()=>d(void 0);void 0!==t.transform&&(o=e=>t.transform(e,r)),void 0!==t.flush&&(n=()=>t.flush(r)),function(e,t,r,o){t._controlledTransformStream=e,e._transformStreamController=t,t._transformAlgorithm=r,t._flushAlgorithm=o}(e,r,o,n)}(this,i),void 0!==i.start?h(i.start(this._transformStreamController)):h(void 0)}get readable(){if(!xr(this))throw Vr("readable");return this._readable}get writable(){if(!xr(this))throw Vr("writable");return this._writable}}function xr(e){return!!n(e)&&!!Object.prototype.hasOwnProperty.call(e,"_transformStreamController")&&e instanceof zr}function $r(e,t){or(e._readable._readableStreamController,t),Fr(e,t)}function Fr(e,t){Dr(e._transformStreamController),kt(e._writable._writableStreamController,t),e._backpressure&&Mr(e,!1)}function Mr(e,t){void 0!==e._backpressureChangePromise&&e._backpressureChangePromise_resolve(),e._backpressureChangePromise=c((t=>{e._backpressureChangePromise_resolve=t})),e._backpressure=t}Object.defineProperties(zr.prototype,{readable:{enumerable:!0},writable:{enumerable:!0}}),"symbol"==typeof t.toStringTag&&Object.defineProperty(zr.prototype,t.toStringTag,{value:"TransformStream",configurable:!0});class Ir{constructor(){throw new TypeError("Illegal constructor")}get desiredSize(){if(!Ur(this))throw Zr("desiredSize");return nr(this._controlledTransformStream._readable._readableStreamController)}enqueue(e=void 0){if(!Ur(this))throw Zr("enqueue");Hr(this,e)}error(e=void 0){if(!Ur(this))throw Zr("error");var t;t=e,$r(this._controlledTransformStream,t)}terminate(){if(!Ur(this))throw Zr("terminate");!function(e){const t=e._controlledTransformStream;tr(t._readable._readableStreamController);Fr(t,new TypeError("TransformStream terminated"))}(this)}}function Ur(e){return!!n(e)&&!!Object.prototype.hasOwnProperty.call(e,"_controlledTransformStream")&&e instanceof Ir}function Dr(e){e._transformAlgorithm=void 0,e._flushAlgorithm=void 0}function Hr(e,t){const r=e._controlledTransformStream,o=r._readable._readableStreamController;if(!ir(o))throw new TypeError("Readable side is not in a state that permits enqueue");try{rr(o,t)}catch(e){throw Fr(r,e),r._readable._storedError}const n=function(e){return!Xt(e)}(o);n!==r._backpressure&&Mr(r,!0)}function Nr(e,t){return m(e._transformAlgorithm(t),void 0,(t=>{throw $r(e._controlledTransformStream,t),t}))}function Zr(e){return new TypeError(`TransformStreamDefaultController.prototype.${e} can only be used on a TransformStreamDefaultController`)}function Vr(e){return new TypeError(`TransformStream.prototype.${e} can only be used on a TransformStream`)}Object.defineProperties(Ir.prototype,{enqueue:{enumerable:!0},error:{enumerable:!0},terminate:{enumerable:!0},desiredSize:{enumerable:!0}}),"symbol"==typeof t.toStringTag&&Object.defineProperty(Ir.prototype,t.toStringTag,{value:"TransformStreamDefaultController",configurable:!0}),e.ByteLengthQueuingStrategy=Pr,e.CountQueuingStrategy=jr,e.ReadableByteStreamController=be,e.ReadableStream=pr,e.ReadableStreamBYOBReader=Ne,e.ReadableStreamBYOBRequest=pe,e.ReadableStreamDefaultController=Gt,e.ReadableStreamDefaultReader=J,e.TransformStream=zr,e.TransformStreamDefaultController=Ir,e.WritableStream=it,e.WritableStreamDefaultController=Et,e.WritableStreamDefaultWriter=gt,Object.defineProperty(e,"__esModule",{value:!0})},r(t)},7135:(e,t,r)=>{if(!globalThis.ReadableStream)try{const e=r(7742),{emitWarning:t}=e;try{e.emitWarning=()=>{},Object.assign(globalThis,r(2477)),e.emitWarning=t}catch(r){throw e.emitWarning=t,r}}catch(e){Object.assign(globalThis,r(3879))}try{const{Blob:e}=r(4300);e&&!e.prototype.stream&&(e.prototype.stream=function(e){let t=0;const r=this;return new ReadableStream({type:"bytes",async pull(e){const o=r.slice(t,Math.min(r.size,t+65536)),n=await o.arrayBuffer();t+=n.byteLength,e.enqueue(new Uint8Array(n)),t===r.size&&e.close()}})})}catch(e){}},2626:(e,t,r)=>{"use strict";r.d(t,{Z:()=>n});var o=r(1556);const n=class extends o.Z{#e=0;#t="";constructor(e,t,r={}){if(arguments.length<2)throw new TypeError(`Failed to construct 'File': 2 arguments required, but only ${arguments.length} present.`);super(e,r),null===r&&(r={});const o=void 0===r.lastModified?Date.now():Number(r.lastModified);Number.isNaN(o)||(this.#e=o),this.#t=String(t)}get name(){return this.#t}get lastModified(){return this.#e}get[Symbol.toStringTag](){return"File"}static[Symbol.hasInstance](e){return!!e&&e instanceof o.Z&&/^(File)$/.test(e[Symbol.toStringTag])}}},5021:(e,t,r)=>{"use strict";r.d(t,{$B:()=>n.Z});var o=r(7561),n=(r(9411),r(583),r(2626));r(1556);const{stat:i}=o.promises;Symbol.toStringTag},1556:(e,t,r)=>{"use strict";async function*o(e,t=!0){for(const r of e)if("stream"in r)yield*r.stream();else if(ArrayBuffer.isView(r))if(t){let e=r.byteOffset;const t=r.byteOffset+r.byteLength;for(;e!==t;){const o=Math.min(t-e,65536),n=r.buffer.slice(e,e+o);e+=n.byteLength,yield new Uint8Array(n)}}else yield r;else{let e=0,t=r;for(;e!==t.size;){const r=t.slice(e,Math.min(t.size,e+65536)),o=await r.arrayBuffer();e+=o.byteLength,yield new Uint8Array(o)}}}r.d(t,{Z:()=>i}),r(7135);const n=class e{#r=[];#o="";#n=0;#i="transparent";constructor(t=[],r={}){if("object"!=typeof t||null===t)throw new TypeError("Failed to construct 'Blob': The provided value cannot be converted to a sequence.");if("function"!=typeof t[Symbol.iterator])throw new TypeError("Failed to construct 'Blob': The object must have a callable @@iterator property.");if("object"!=typeof r&&"function"!=typeof r)throw new TypeError("Failed to construct 'Blob': parameter 2 cannot convert to dictionary.");null===r&&(r={});const o=new TextEncoder;for(const r of t){let t;t=ArrayBuffer.isView(r)?new Uint8Array(r.buffer.slice(r.byteOffset,r.byteOffset+r.byteLength)):r instanceof ArrayBuffer?new Uint8Array(r.slice(0)):r instanceof e?r:o.encode(`${r}`),this.#n+=ArrayBuffer.isView(t)?t.byteLength:t.size,this.#r.push(t)}this.#i=`${void 0===r.endings?"transparent":r.endings}`;const n=void 0===r.type?"":String(r.type);this.#o=/^[\x20-\x7E]*$/.test(n)?n:""}get size(){return this.#n}get type(){return this.#o}async text(){const e=new TextDecoder;let t="";for await(const r of o(this.#r,!1))t+=e.decode(r,{stream:!0});return t+=e.decode(),t}async arrayBuffer(){const e=new Uint8Array(this.size);let t=0;for await(const r of o(this.#r,!1))e.set(r,t),t+=r.length;return e.buffer}stream(){const e=o(this.#r,!0);return new globalThis.ReadableStream({type:"bytes",async pull(t){const r=await e.next();r.done?t.close():t.enqueue(r.value)},async cancel(){await e.return()}})}slice(t=0,r=this.size,o=""){const{size:n}=this;let i=t<0?Math.max(n+t,0):Math.min(t,n),s=r<0?Math.max(n+r,0):Math.min(r,n);const a=Math.max(s-i,0),l=this.#r,u=[];let c=0;for(const e of l){if(c>=a)break;const t=ArrayBuffer.isView(e)?e.byteLength:e.size;if(i&&t<=i)i-=t,s-=t;else{let r;ArrayBuffer.isView(e)?(r=e.subarray(i,Math.min(t,s)),c+=r.byteLength):(r=e.slice(i,Math.min(t,s)),c+=r.size),s-=t,u.push(r),i=0}}const d=new e([],{type:String(o).toLowerCase()});return d.#n=a,d.#r=u,d}get[Symbol.toStringTag](){return"Blob"}static[Symbol.hasInstance](e){return e&&"object"==typeof e&&"function"==typeof e.constructor&&("function"==typeof e.stream||"function"==typeof e.arrayBuffer)&&/^(Blob|File)$/.test(e[Symbol.toStringTag])}};Object.defineProperties(n.prototype,{size:{enumerable:!0},type:{enumerable:!0},slice:{enumerable:!0}});const i=n},2494:(e,t,r)=>{"use strict";r.d(t,{Ct:()=>h,au:()=>p});var o=r(1556),n=r(2626),{toStringTag:i,iterator:s,hasInstance:a}=Symbol,l=Math.random,u="append,set,get,getAll,delete,keys,values,entries,forEach,constructor".split(","),c=(e,t,r)=>(e+="",/^(Blob|File)$/.test(t&&t[i])?[(r=void 0!==r?r+"":"File"==t[i]?t.name:"blob",e),t.name!==r||"blob"==t[i]?new n.Z([t],r,t):t]:[e,t+""]),d=(e,t)=>(t?e:e.replace(/\r?\n|\r/g,"\r\n")).replace(/\n/g,"%0A").replace(/\r/g,"%0D").replace(/"/g,"%22"),f=(e,t,r)=>{if(t.length<r)throw new TypeError(`Failed to execute '${e}' on 'FormData': ${r} arguments required, but only ${t.length} present.`)};const h=class{#s=[];constructor(...e){if(e.length)throw new TypeError("Failed to construct 'FormData': parameter 1 is not of type 'HTMLFormElement'.")}get[i](){return"FormData"}[s](){return this.entries()}static[a](e){return e&&"object"==typeof e&&"FormData"===e[i]&&!u.some((t=>"function"!=typeof e[t]))}append(...e){f("append",arguments,2),this.#s.push(c(...e))}delete(e){f("delete",arguments,1),e+="",this.#s=this.#s.filter((([t])=>t!==e))}get(e){f("get",arguments,1),e+="";for(var t=this.#s,r=t.length,o=0;o<r;o++)if(t[o][0]===e)return t[o][1];return null}getAll(e,t){return f("getAll",arguments,1),t=[],e+="",this.#s.forEach((r=>r[0]===e&&t.push(r[1]))),t}has(e){return f("has",arguments,1),e+="",this.#s.some((t=>t[0]===e))}forEach(e,t){for(var[r,o]of(f("forEach",arguments,1),this))e.call(t,o,r,this)}set(...e){f("set",arguments,2);var t=[],r=!0;e=c(...e),this.#s.forEach((o=>{o[0]===e[0]?r&&(r=!t.push(e)):t.push(o)})),r&&t.push(e),this.#s=t}*entries(){yield*this.#s}*keys(){for(var[e]of this)yield e}*values(){for(var[,e]of this)yield e}};function p(e,t=o.Z){var r=`${l()}${l()}`.replace(/\./g,"").slice(-28).padStart(32,"-"),n=[],i=`--${r}\r\nContent-Disposition: form-data; name="`;return e.forEach(((e,t)=>"string"==typeof e?n.push(i+d(t)+`"\r\n\r\n${e.replace(/\r(?!\n)|(?<!\r)\n/g,"\r\n")}\r\n`):n.push(i+d(t)+`"; filename="${d(e.name,1)}"\r\nContent-Type: ${e.type||"application/octet-stream"}\r\n\r\n`,e,"\r\n"))),n.push(`--${r}--`),new t(n,{type:"multipart/form-data; boundary="+r})}},6208:(e,t,r)=>{"use strict";r.a(e,(async(e,o)=>{try{r.r(t),r.d(t,{HTTPError:()=>c,TimeoutError:()=>d,default:()=>f});var n=r(9891),i=r(7665),s=r(2937),a=r(8461),l=r(6123);const e=1e7;if(globalThis.fetch||(globalThis.fetch=(t,r)=>(0,n.ZP)(t,{highWaterMark:e,...r})),globalThis.Headers||(globalThis.Headers=i.Z),globalThis.Request||(globalThis.Request=s.Z),globalThis.Response||(globalThis.Response=a.Z),globalThis.AbortController||(globalThis.AbortController=l),!globalThis.ReadableStream)try{globalThis.ReadableStream=await r.e(544).then(r.t.bind(r,1544,19))}catch{}const{default:u,HTTPError:c,TimeoutError:d}=await r.e(745).then(r.bind(r,745)),f=u;o()}catch(e){o(e)}}),1)},2149:(e,t,r)=>{"use strict";r.d(t,{K1:()=>_,NV:()=>g,Vl:()=>m,ZP:()=>h,d9:()=>b});var o=r(4492),n=r(7261),i=r(2254),s=r(1556),a=r(2494),l=r(5449),u=r(681),c=r(1325);const d=(0,n.promisify)(o.pipeline),f=Symbol("Body internals");class h{constructor(e,{size:t=0}={}){let r=null;null===e?e=null:(0,c.SB)(e)?e=i.Buffer.from(e.toString()):(0,c.Lj)(e)||i.Buffer.isBuffer(e)||(n.types.isAnyArrayBuffer(e)?e=i.Buffer.from(e):ArrayBuffer.isView(e)?e=i.Buffer.from(e.buffer,e.byteOffset,e.byteLength):e instanceof o||(e instanceof a.Ct?r=(e=(0,a.au)(e)).type.split("=")[1]:e=i.Buffer.from(String(e))));let s=e;i.Buffer.isBuffer(e)?s=o.Readable.from(e):(0,c.Lj)(e)&&(s=o.Readable.from(e.stream())),this[f]={body:e,stream:s,boundary:r,disturbed:!1,error:null},this.size=t,e instanceof o&&e.on("error",(e=>{const t=e instanceof u.f?e:new l.k(`Invalid response body while trying to fetch ${this.url}: ${e.message}`,"system",e);this[f].error=t}))}get body(){return this[f].stream}get bodyUsed(){return this[f].disturbed}async arrayBuffer(){const{buffer:e,byteOffset:t,byteLength:r}=await p(this);return e.slice(t,t+r)}async formData(){const e=this.headers.get("content-type");if(e.startsWith("application/x-www-form-urlencoded")){const e=new a.Ct,t=new URLSearchParams(await this.text());for(const[r,o]of t)e.append(r,o);return e}const{toFormData:t}=await r.e(532).then(r.bind(r,532));return t(this.body,e)}async blob(){const e=this.headers&&this.headers.get("content-type")||this[f].body&&this[f].body.type||"",t=await this.arrayBuffer();return new s.Z([t],{type:e})}async json(){const e=await this.text();return JSON.parse(e)}async text(){const e=await p(this);return(new TextDecoder).decode(e)}buffer(){return p(this)}}async function p(e){if(e[f].disturbed)throw new TypeError(`body used already for: ${e.url}`);if(e[f].disturbed=!0,e[f].error)throw e[f].error;const{body:t}=e;if(null===t)return i.Buffer.alloc(0);if(!(t instanceof o))return i.Buffer.alloc(0);const r=[];let n=0;try{for await(const o of t){if(e.size>0&&n+o.length>e.size){const r=new l.k(`content size at ${e.url} over limit: ${e.size}`,"max-size");throw t.destroy(r),r}n+=o.length,r.push(o)}}catch(t){throw t instanceof u.f?t:new l.k(`Invalid response body while trying to fetch ${e.url}: ${t.message}`,"system",t)}if(!0!==t.readableEnded&&!0!==t._readableState.ended)throw new l.k(`Premature close of server response while trying to fetch ${e.url}`);try{return r.every((e=>"string"==typeof e))?i.Buffer.from(r.join("")):i.Buffer.concat(r,n)}catch(t){throw new l.k(`Could not create Buffer from response body for ${e.url}: ${t.message}`,"system",t)}}h.prototype.buffer=(0,n.deprecate)(h.prototype.buffer,"Please use 'response.arrayBuffer()' instead of 'response.buffer()'","node-fetch#buffer"),Object.defineProperties(h.prototype,{body:{enumerable:!0},bodyUsed:{enumerable:!0},arrayBuffer:{enumerable:!0},blob:{enumerable:!0},json:{enumerable:!0},text:{enumerable:!0},data:{get:(0,n.deprecate)((()=>{}),"data doesn't exist, use json(), text(), arrayBuffer(), or body instead","https://github.com/node-fetch/node-fetch/issues/1000 (response)")}});const b=(e,t)=>{let r,n,{body:i}=e[f];if(e.bodyUsed)throw new Error("cannot clone body after it is used");return i instanceof o&&"function"!=typeof i.getBoundary&&(r=new o.PassThrough({highWaterMark:t}),n=new o.PassThrough({highWaterMark:t}),i.pipe(r),i.pipe(n),e[f].stream=r,i=n),i},y=(0,n.deprecate)((e=>e.getBoundary()),"form-data doesn't follow the spec and requires special treatment. Use alternative package","https://github.com/node-fetch/node-fetch/issues/1167"),m=(e,t)=>null===e?null:"string"==typeof e?"text/plain;charset=UTF-8":(0,c.SB)(e)?"application/x-www-form-urlencoded;charset=UTF-8":(0,c.Lj)(e)?e.type||null:i.Buffer.isBuffer(e)||n.types.isAnyArrayBuffer(e)||ArrayBuffer.isView(e)?null:e instanceof a.Ct?`multipart/form-data; boundary=${t[f].boundary}`:e&&"function"==typeof e.getBoundary?`multipart/form-data;boundary=${y(e)}`:e instanceof o?null:"text/plain;charset=UTF-8",g=e=>{const{body:t}=e[f];return null===t?0:(0,c.Lj)(t)?t.size:i.Buffer.isBuffer(t)?t.length:t&&"function"==typeof t.getLengthSync&&t.hasKnownLength&&t.hasKnownLength()?t.getLengthSync():null},_=async(e,{body:t})=>{null===t?e.end():await d(t,e)}},681:(e,t,r)=>{"use strict";r.d(t,{f:()=>o});class o extends Error{constructor(e,t){super(e),Error.captureStackTrace(this,this.constructor),this.type=t}get name(){return this.constructor.name}get[Symbol.toStringTag](){return this.constructor.name}}},5449:(e,t,r)=>{"use strict";r.d(t,{k:()=>n});var o=r(681);class n extends o.f{constructor(e,t,r){super(e,t),r&&(this.code=this.errno=r.code,this.erroredSysCall=r.syscall)}}},7665:(e,t,r)=>{"use strict";r.d(t,{Z:()=>a,x:()=>l});var o=r(7261),n=r(8849);const i="function"==typeof n.validateHeaderName?n.validateHeaderName:e=>{if(!/^[\^`\-\w!#$%&'*+.|~]+$/.test(e)){const t=new TypeError(`Header name must be a valid HTTP token [${e}]`);throw Object.defineProperty(t,"code",{value:"ERR_INVALID_HTTP_TOKEN"}),t}},s="function"==typeof n.validateHeaderValue?n.validateHeaderValue:(e,t)=>{if(/[^\t\u0020-\u007E\u0080-\u00FF]/.test(t)){const t=new TypeError(`Invalid character in header content ["${e}"]`);throw Object.defineProperty(t,"code",{value:"ERR_INVALID_CHAR"}),t}};class a extends URLSearchParams{constructor(e){let t=[];if(e instanceof a){const r=e.raw();for(const[e,o]of Object.entries(r))t.push(...o.map((t=>[e,t])))}else if(null==e);else{if("object"!=typeof e||o.types.isBoxedPrimitive(e))throw new TypeError("Failed to construct 'Headers': The provided value is not of type '(sequence<sequence<ByteString>> or record<ByteString, ByteString>)");{const r=e[Symbol.iterator];if(null==r)t.push(...Object.entries(e));else{if("function"!=typeof r)throw new TypeError("Header pairs must be iterable");t=[...e].map((e=>{if("object"!=typeof e||o.types.isBoxedPrimitive(e))throw new TypeError("Each header pair must be an iterable object");return[...e]})).map((e=>{if(2!==e.length)throw new TypeError("Each header pair must be a name/value tuple");return[...e]}))}}}return t=t.length>0?t.map((([e,t])=>(i(e),s(e,String(t)),[String(e).toLowerCase(),String(t)]))):void 0,super(t),new Proxy(this,{get(e,t,r){switch(t){case"append":case"set":return(r,o)=>(i(r),s(r,String(o)),URLSearchParams.prototype[t].call(e,String(r).toLowerCase(),String(o)));case"delete":case"has":case"getAll":return r=>(i(r),URLSearchParams.prototype[t].call(e,String(r).toLowerCase()));case"keys":return()=>(e.sort(),new Set(URLSearchParams.prototype.keys.call(e)).keys());default:return Reflect.get(e,t,r)}}})}get[Symbol.toStringTag](){return this.constructor.name}toString(){return Object.prototype.toString.call(this)}get(e){const t=this.getAll(e);if(0===t.length)return null;let r=t.join(", ");return/^content-encoding$/i.test(e)&&(r=r.toLowerCase()),r}forEach(e,t=void 0){for(const r of this.keys())Reflect.apply(e,t,[this.get(r),r,this])}*values(){for(const e of this.keys())yield this.get(e)}*entries(){for(const e of this.keys())yield[e,this.get(e)]}[Symbol.iterator](){return this.entries()}raw(){return[...this.keys()].reduce(((e,t)=>(e[t]=this.getAll(t),e)),{})}[Symbol.for("nodejs.util.inspect.custom")](){return[...this.keys()].reduce(((e,t)=>{const r=this.getAll(t);return e[t]="host"===t?r[0]:r.length>1?r:r[0],e}),{})}}function l(e=[]){return new a(e.reduce(((e,t,r,o)=>(r%2==0&&e.push(o.slice(r,r+2)),e)),[]).filter((([e,t])=>{try{return i(e),s(e,String(t)),!0}catch{return!1}})))}Object.defineProperties(a.prototype,["get","entries","forEach","values"].reduce(((e,t)=>(e[t]={enumerable:!0},e)),{}))},9891:(e,t,r)=>{"use strict";r.d(t,{ZP:()=>w});var o=r(8849),n=r(2286),i=r(5628),s=r(4492),a=r(2254);const l=function(e){if(!/^data:/i.test(e))throw new TypeError('`uri` does not appear to be a Data URI (must begin with "data:")');const t=(e=e.replace(/\r?\n/g,"")).indexOf(",");if(-1===t||t<=4)throw new TypeError("malformed data: URI");const r=e.substring(5,t).split(";");let o="",n=!1;const i=r[0]||"text/plain";let s=i;for(let e=1;e<r.length;e++)"base64"===r[e]?n=!0:r[e]&&(s+=`;${r[e]}`,0===r[e].indexOf("charset=")&&(o=r[e].substring(8)));r[0]||o.length||(s+=";charset=US-ASCII",o="US-ASCII");const a=n?"base64":"ascii",l=unescape(e.substring(t+1)),u=Buffer.from(l,a);return u.type=i,u.typeFull=s,u.charset=o,u};var u=r(2149),c=r(8461),d=r(7665),f=r(2937),h=r(5449),p=r(681);class b extends p.f{constructor(e,t="aborted"){super(e,t)}}var y=r(5600),m=(r(2494),r(1325)),g=r(2013);r(5021);const _=new Set(["data:","http:","https:"]);async function w(e,t){return new Promise(((r,p)=>{const v=new f.Z(e,t),{parsedURL:S,options:T}=(0,f.R)(v);if(!_.has(S.protocol))throw new TypeError(`node-fetch cannot load ${e}. URL scheme "${S.protocol.replace(/:$/,"")}" is not supported.`);if("data:"===S.protocol){const e=l(v.url),t=new c.Z(e,{headers:{"Content-Type":e.typeFull}});return void r(t)}const R=("https:"===S.protocol?n:o).request,{signal:E}=v;let P=null;const C=()=>{const e=new b("The operation was aborted.");p(e),v.body&&v.body instanceof s.Readable&&v.body.destroy(e),P&&P.body&&P.body.emit("error",e)};if(E&&E.aborted)return void C();const O=()=>{C(),j()},q=R(S.toString(),T);E&&E.addEventListener("abort",O);const j=()=>{q.abort(),E&&E.removeEventListener("abort",O)};q.on("error",(e=>{p(new h.k(`request to ${v.url} failed, reason: ${e.message}`,"system",e)),j()})),function(e,t){const r=a.Buffer.from("0\r\n\r\n");let o,n=!1,i=!1;e.on("response",(e=>{const{headers:t}=e;n="chunked"===t["transfer-encoding"]&&!t["content-length"]})),e.on("socket",(t=>{const s=()=>{if(n&&!i){const e=new Error("Premature close");e.code="ERR_STREAM_PREMATURE_CLOSE",(e=>{P&&P.body&&P.body.destroy(e)})(e)}},l=e=>{i=0===a.Buffer.compare(e.slice(-5),r),!i&&o&&(i=0===a.Buffer.compare(o.slice(-3),r.slice(0,3))&&0===a.Buffer.compare(e.slice(-2),r.slice(3))),o=e};t.prependListener("close",s),t.on("data",l),e.on("close",(()=>{t.removeListener("close",s),t.removeListener("data",l)}))}))}(q),process.version<"v14"&&q.on("socket",(e=>{let t;e.prependListener("end",(()=>{t=e._eventsCount})),e.prependListener("close",(r=>{if(P&&t<e._eventsCount&&!r){const e=new Error("Premature close");e.code="ERR_STREAM_PREMATURE_CLOSE",P.body.emit("error",e)}}))})),q.on("response",(e=>{q.setTimeout(0);const o=(0,d.x)(e.rawHeaders);if((0,y.x)(e.statusCode)){const n=o.get("Location");let i=null;try{i=null===n?null:new URL(n,v.url)}catch{if("manual"!==v.redirect)return p(new h.k(`uri requested responds with an invalid redirect URL: ${n}`,"invalid-redirect")),void j()}switch(v.redirect){case"error":return p(new h.k(`uri requested responds with a redirect, redirect mode is set to error: ${v.url}`,"no-redirect")),void j();case"manual":break;case"follow":{if(null===i)break;if(v.counter>=v.follow)return p(new h.k(`maximum redirect reached at: ${v.url}`,"max-redirect")),void j();const n={headers:new d.Z(v.headers),follow:v.follow,counter:v.counter+1,agent:v.agent,compress:v.compress,method:v.method,body:(0,u.d9)(v),signal:v.signal,size:v.size,referrer:v.referrer,referrerPolicy:v.referrerPolicy};if(!(0,m.JN)(v.url,i)||!(0,m.eL)(v.url,i))for(const e of["authorization","www-authenticate","cookie","cookie2"])n.headers.delete(e);if(303!==e.statusCode&&v.body&&t.body instanceof s.Readable)return p(new h.k("Cannot follow redirect with body being a readable stream","unsupported-redirect")),void j();303!==e.statusCode&&(301!==e.statusCode&&302!==e.statusCode||"POST"!==v.method)||(n.method="GET",n.body=void 0,n.headers.delete("content-length"));const a=(0,g.Cc)(o);return a&&(n.referrerPolicy=a),r(w(new f.Z(i,n))),void j()}default:return p(new TypeError(`Redirect option '${v.redirect}' is not a valid value of RequestRedirect`))}}E&&e.once("end",(()=>{E.removeEventListener("abort",O)}));let n=(0,s.pipeline)(e,new s.PassThrough,(e=>{e&&p(e)}));process.version<"v12.10"&&e.on("aborted",O);const a={url:v.url,status:e.statusCode,statusText:e.statusMessage,headers:o,size:v.size,counter:v.counter,highWaterMark:v.highWaterMark},l=o.get("Content-Encoding");if(!v.compress||"HEAD"===v.method||null===l||204===e.statusCode||304===e.statusCode)return P=new c.Z(n,a),void r(P);const b={flush:i.Z_SYNC_FLUSH,finishFlush:i.Z_SYNC_FLUSH};if("gzip"===l||"x-gzip"===l)return n=(0,s.pipeline)(n,i.createGunzip(b),(e=>{e&&p(e)})),P=new c.Z(n,a),void r(P);if("deflate"===l||"x-deflate"===l){const t=(0,s.pipeline)(e,new s.PassThrough,(e=>{e&&p(e)}));return t.once("data",(e=>{n=8==(15&e[0])?(0,s.pipeline)(n,i.createInflate(),(e=>{e&&p(e)})):(0,s.pipeline)(n,i.createInflateRaw(),(e=>{e&&p(e)})),P=new c.Z(n,a),r(P)})),void t.once("end",(()=>{P||(P=new c.Z(n,a),r(P))}))}if("br"===l)return n=(0,s.pipeline)(n,i.createBrotliDecompress(),(e=>{e&&p(e)})),P=new c.Z(n,a),void r(P);P=new c.Z(n,a),r(P)})),(0,u.K1)(q,v).catch(p)}))}},2937:(e,t,r)=>{"use strict";r.d(t,{Z:()=>f,R:()=>h});var o=r(1041),n=r(7261),i=r(7665),s=r(2149),a=r(1325),l=r(2013);const u=Symbol("Request internals"),c=e=>"object"==typeof e&&"object"==typeof e[u],d=(0,n.deprecate)((()=>{}),".data is not a valid RequestInit property, use .body instead","https://github.com/node-fetch/node-fetch/issues/1000 (request)");class f extends s.ZP{constructor(e,t={}){let r;if(c(e)?r=new URL(e.url):(r=new URL(e),e={}),""!==r.username||""!==r.password)throw new TypeError(`${r} is an url with embedded credentials.`);let o=t.method||e.method||"GET";if(/^(delete|get|head|options|post|put)$/i.test(o)&&(o=o.toUpperCase()),!c(t)&&"data"in t&&d(),(null!=t.body||c(e)&&null!==e.body)&&("GET"===o||"HEAD"===o))throw new TypeError("Request with GET/HEAD method cannot have body");const n=t.body?t.body:c(e)&&null!==e.body?(0,s.d9)(e):null;super(n,{size:t.size||e.size||0});const l=new i.Z(t.headers||e.headers||{});if(null!==n&&!l.has("Content-Type")){const e=(0,s.Vl)(n,this);e&&l.set("Content-Type",e)}let f=c(e)?e.signal:null;if("signal"in t&&(f=t.signal),null!=f&&!(0,a.O0)(f))throw new TypeError("Expected signal to be an instanceof AbortSignal or EventTarget");let h=null==t.referrer?e.referrer:t.referrer;if(""===h)h="no-referrer";else if(h){const e=new URL(h);h=/^about:(\/\/)?client$/.test(e)?"client":e}else h=void 0;this[u]={method:o,redirect:t.redirect||e.redirect||"follow",headers:l,parsedURL:r,signal:f,referrer:h},this.follow=void 0===t.follow?void 0===e.follow?20:e.follow:t.follow,this.compress=void 0===t.compress?void 0===e.compress||e.compress:t.compress,this.counter=t.counter||e.counter||0,this.agent=t.agent||e.agent,this.highWaterMark=t.highWaterMark||e.highWaterMark||16384,this.insecureHTTPParser=t.insecureHTTPParser||e.insecureHTTPParser||!1,this.referrerPolicy=t.referrerPolicy||e.referrerPolicy||""}get method(){return this[u].method}get url(){return(0,o.format)(this[u].parsedURL)}get headers(){return this[u].headers}get redirect(){return this[u].redirect}get signal(){return this[u].signal}get referrer(){return"no-referrer"===this[u].referrer?"":"client"===this[u].referrer?"about:client":this[u].referrer?this[u].referrer.toString():void 0}get referrerPolicy(){return this[u].referrerPolicy}set referrerPolicy(e){this[u].referrerPolicy=(0,l.vr)(e)}clone(){return new f(this)}get[Symbol.toStringTag](){return"Request"}}Object.defineProperties(f.prototype,{method:{enumerable:!0},url:{enumerable:!0},headers:{enumerable:!0},redirect:{enumerable:!0},clone:{enumerable:!0},signal:{enumerable:!0},referrer:{enumerable:!0},referrerPolicy:{enumerable:!0}});const h=e=>{const{parsedURL:t}=e[u],r=new i.Z(e[u].headers);r.has("Accept")||r.set("Accept","*/*");let o=null;if(null===e.body&&/^(post|put)$/i.test(e.method)&&(o="0"),null!==e.body){const t=(0,s.NV)(e);"number"!=typeof t||Number.isNaN(t)||(o=String(t))}o&&r.set("Content-Length",o),""===e.referrerPolicy&&(e.referrerPolicy=l.Cs),e.referrer&&"no-referrer"!==e.referrer?e[u].referrer=(0,l.HH)(e):e[u].referrer="no-referrer",e[u].referrer instanceof URL&&r.set("Referer",e.referrer),r.has("User-Agent")||r.set("User-Agent","node-fetch"),e.compress&&!r.has("Accept-Encoding")&&r.set("Accept-Encoding","gzip, deflate, br");let{agent:n}=e;"function"==typeof n&&(n=n(t));const a=(e=>{if(e.search)return e.search;const t=e.href.length-1,r=e.hash||("#"===e.href[t]?"#":"");return"?"===e.href[t-r.length]?"?":""})(t);return{parsedURL:t,options:{path:t.pathname+a,method:e.method,headers:r[Symbol.for("nodejs.util.inspect.custom")](),insecureHTTPParser:e.insecureHTTPParser,agent:n}}}},8461:(e,t,r)=>{"use strict";r.d(t,{Z:()=>a});var o=r(7665),n=r(2149),i=r(5600);const s=Symbol("Response internals");class a extends n.ZP{constructor(e=null,t={}){super(e,t);const r=null!=t.status?t.status:200,i=new o.Z(t.headers);if(null!==e&&!i.has("Content-Type")){const t=(0,n.Vl)(e,this);t&&i.append("Content-Type",t)}this[s]={type:"default",url:t.url,status:r,statusText:t.statusText||"",headers:i,counter:t.counter,highWaterMark:t.highWaterMark}}get type(){return this[s].type}get url(){return this[s].url||""}get status(){return this[s].status}get ok(){return this[s].status>=200&&this[s].status<300}get redirected(){return this[s].counter>0}get statusText(){return this[s].statusText}get headers(){return this[s].headers}get highWaterMark(){return this[s].highWaterMark}clone(){return new a((0,n.d9)(this,this.highWaterMark),{type:this.type,url:this.url,status:this.status,statusText:this.statusText,headers:this.headers,ok:this.ok,redirected:this.redirected,size:this.size,highWaterMark:this.highWaterMark})}static redirect(e,t=302){if(!(0,i.x)(t))throw new RangeError('Failed to execute "redirect" on "response": Invalid status code');return new a(null,{headers:{location:new URL(e).toString()},status:t})}static error(){const e=new a(null,{status:0,statusText:""});return e[s].type="error",e}static json(e=void 0,t={}){const r=JSON.stringify(e);if(void 0===r)throw new TypeError("data is not JSON serializable");const n=new o.Z(t&&t.headers);return n.has("content-type")||n.set("content-type","application/json"),new a(r,{...t,headers:n})}get[Symbol.toStringTag](){return"Response"}}Object.defineProperties(a.prototype,{type:{enumerable:!0},url:{enumerable:!0},status:{enumerable:!0},ok:{enumerable:!0},redirected:{enumerable:!0},statusText:{enumerable:!0},headers:{enumerable:!0},clone:{enumerable:!0}})},5600:(e,t,r)=>{"use strict";r.d(t,{x:()=>n});const o=new Set([301,302,303,307,308]),n=e=>o.has(e)},1325:(e,t,r)=>{"use strict";r.d(t,{JN:()=>a,Lj:()=>i,O0:()=>s,SB:()=>n,eL:()=>l});const o=Symbol.toStringTag,n=e=>"object"==typeof e&&"function"==typeof e.append&&"function"==typeof e.delete&&"function"==typeof e.get&&"function"==typeof e.getAll&&"function"==typeof e.has&&"function"==typeof e.set&&"function"==typeof e.sort&&"URLSearchParams"===e[o],i=e=>e&&"object"==typeof e&&"function"==typeof e.arrayBuffer&&"string"==typeof e.type&&"function"==typeof e.stream&&"function"==typeof e.constructor&&/^(Blob|File)$/.test(e[o]),s=e=>"object"==typeof e&&("AbortSignal"===e[o]||"EventTarget"===e[o]),a=(e,t)=>{const r=new URL(t).hostname,o=new URL(e).hostname;return r===o||r.endsWith(`.${o}`)},l=(e,t)=>new URL(t).protocol===new URL(e).protocol},2013:(e,t,r)=>{"use strict";r.d(t,{Cc:()=>c,Cs:()=>s,HH:()=>u,vr:()=>a});var o=r(7503);function n(e,t=!1){return null==e?"no-referrer":(e=new URL(e),/^(about|blob|data):$/.test(e.protocol)?"no-referrer":(e.username="",e.password="",e.hash="",t&&(e.pathname="",e.search=""),e))}const i=new Set(["","no-referrer","no-referrer-when-downgrade","same-origin","origin","strict-origin","origin-when-cross-origin","strict-origin-when-cross-origin","unsafe-url"]),s="strict-origin-when-cross-origin";function a(e){if(!i.has(e))throw new TypeError(`Invalid referrerPolicy: ${e}`);return e}function l(e){return!!/^about:(blank|srcdoc)$/.test(e)||"data:"===e.protocol||!!/^(blob|filesystem):$/.test(e.protocol)||function(e){if(/^(http|ws)s:$/.test(e.protocol))return!0;const t=e.host.replace(/(^\[)|(]$)/g,""),r=(0,o.isIP)(t);return!(4!==r||!/^127\./.test(t))||!(6!==r||!/^(((0+:){7})|(::(0+:){0,6}))0*1$/.test(t))||"localhost"!==e.host&&!e.host.endsWith(".localhost")&&"file:"===e.protocol}(e)}function u(e,{referrerURLCallback:t,referrerOriginCallback:r}={}){if("no-referrer"===e.referrer||""===e.referrerPolicy)return null;const o=e.referrerPolicy;if("about:client"===e.referrer)return"no-referrer";const i=e.referrer;let s=n(i),a=n(i,!0);s.toString().length>4096&&(s=a),t&&(s=t(s)),r&&(a=r(a));const u=new URL(e.url);switch(o){case"no-referrer":return"no-referrer";case"origin":return a;case"unsafe-url":return s;case"strict-origin":return l(s)&&!l(u)?"no-referrer":a.toString();case"strict-origin-when-cross-origin":return s.origin===u.origin?s:l(s)&&!l(u)?"no-referrer":a;case"same-origin":return s.origin===u.origin?s:"no-referrer";case"origin-when-cross-origin":return s.origin===u.origin?s:a;case"no-referrer-when-downgrade":return l(s)&&!l(u)?"no-referrer":s;default:throw new TypeError(`Invalid referrerPolicy: ${o}`)}}function c(e){const t=(e.get("referrer-policy")||"").split(/[,\s]+/);let r="";for(const e of t)e&&i.has(e)&&(r=e);return r}}};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,