{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;;;;AAEF,kBAAe;AACf,gDAAuB;AACvB,qDAAoD;AAEpD,gDAAuB;AACvB,cAAI,CAAC,OAAO,CAAC,cAAc,CAAC,KAAK,GAAG,CAAC,CAAA;AAGrC,MAAM,UAAU,GAAG,cAAI,CAAC,YAAY,CAAC,CAAC,CAAC,EAAE,QAAQ,EAAE,EAAE;IACnD,QAAQ,CAAC,SAAS,CAAC,GAAG,CAAC,CAAA;IACvB,QAAQ,CAAC,GAAG,EAAE,CAAA;AAChB,CAAC,CAAC,CAAA;AAEF,IAAA,0BAAa,EAAC,UAAU,EAAE;IACxB,OAAO,EAAE,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,uBAAuB,IAAI,IAAI,CAAC;IAC9D,GAAG,EAAE;QACH,MAAM,EAAE,OAAO,CAAC,GAAG,CAAC,UAAU;QAC9B,aAAa,EAAE,OAAO,CAAC,GAAG,CAAC,UAAU;QACrC,UAAU,EAAE,OAAO,CAAC,GAAG,CAAC,eAAe;KACxC;IACD,OAAO,EAAE;QACP,GAAG,EAAE,CAAC,GAAG,EAAE,GAAG,IAAI,GAAG,IAAI;KAC1B;CACF,CAAC,CAAA;AAEF,MAAM,IAAI,GAAG,OAAO,CAAC,GAAG,CAAC,cAAc,IAAI,MAAM,CAAA;AACjD,UAAU,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,GAAG,EAAE;IACrC,OAAO,CAAC,GAAG,CAAC,+BAA+B,GAAG,IAAI,CAAC,CAAA;AACrD,CAAC,CAAC,CAAA","sourcesContent":["/**\n *  Copyright 2022 OwlMeans\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n import \"dotenv\"\n import http from 'http'\n import { startWSServer } from '@owlmeans/regov-comm'\n \n import util from 'util'\n util.inspect.defaultOptions.depth = 8\n \n \n const httpServer = http.createServer((_, response) => {\n   response.writeHead(404)\n   response.end()\n })\n \n startWSServer(httpServer, {\n   timeout: parseInt(process.env.RECEIVE_MESSAGE_TIMEOUT || '30'),\n   did: {\n     prefix: process.env.DID_PREFIX,\n     baseSchemaUrl: process.env.DID_SCHEMA,\n     schemaPath: process.env.DID_SCHEMA_PATH,\n   },\n   message: {\n     ttl: 2 * 24 * 3600 * 1000\n   }\n })\n \n const port = process.env.SERVER_WS_PORT || '8080'\n httpServer.listen(parseInt(port), () => {\n   console.log('Server is listening on port: ' + port)\n })\n "]}