{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;GAcG;AAEH,OAAO,CAAC,QAAQ,CAAC,CAAC,MAAM,EAAE,CAAA;AAC1B,OAAO,IAAI,MAAM,MAAM,CAAA;AACvB,OAAO,EAAE,sBAAsB,EAAE,MAAM,0BAA0B,CAAA;AACjE,OAAO,EAAE,sBAAsB,EAAE,MAAM,uCAAuC,CAAA;AAC9E,OAAO,EAAE,aAAa,EAAE,MAAM,sBAAsB,CAAA;AAEpD,OAAO,UAAU,CAAA;AAEjB,OAAO,IAAI,MAAM,MAAM,CAAA;AACvB,IAAI,CAAC,OAAO,CAAC,cAAc,CAAC,KAAK,GAAG,CAAC,CAAA;AAGrC,MAAM,UAAU,GAAG,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC,EAAE,QAAQ,EAAE,EAAE;IACnD,QAAQ,CAAC,SAAS,CAAC,GAAG,CAAC,CAAA;IACvB,QAAQ,CAAC,GAAG,EAAE,CAAA;AAChB,CAAC,CAAC,CAAA;AAEF,MAAM,QAAQ,GAAG,sBAAsB,EAAE,CAAA;AACzC,QAAQ,CAAC,YAAY,CAAC,sBAAsB,CAC1C,eAAe,EAAE,EAAE,OAAO,EAAE,QAAQ,EAAE,EACtC;IACE,IAAI,EAAE,0BAA0B;IAChC,IAAI,EAAE,gBAAgB;IACtB,YAAY,EAAE,UAAU;IACxB,IAAI,EAAE,uBAAuB;IAC7B,aAAa,EAAE,+BAA+B;CAC/C,CACF,CAAC,CAAA;AAEF,aAAa,CAAC,UAAU,EAAE;IACxB,OAAO,EAAE,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,uBAAuB,IAAI,IAAI,CAAC;IAC9D,GAAG,EAAE;QACH,MAAM,EAAE,OAAO,CAAC,GAAG,CAAC,UAAU;QAC9B,aAAa,EAAE,OAAO,CAAC,GAAG,CAAC,UAAU;QACrC,UAAU,EAAE,OAAO,CAAC,GAAG,CAAC,eAAe;KACxC;IACD,OAAO,EAAE;QACP,GAAG,EAAE,CAAC,GAAG,EAAE,GAAG,IAAI,GAAG,IAAI;KAC1B;CACF,EAAE,QAAQ,CAAC,CAAA;AAEZ,MAAM,IAAI,GAAG,OAAO,CAAC,GAAG,CAAC,cAAc,IAAI,IAAI,CAAA;AAC/C,UAAU,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,WAAW,EAAE,GAAG,EAAE;IAClD,OAAO,CAAC,GAAG,CAAC,+BAA+B,GAAG,IAAI,CAAC,CAAA;AACrD,CAAC,CAAC,CAAA","sourcesContent":["/**\n *  Copyright 2022 OwlMeans\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\nrequire('dotenv').config()\nimport http from 'http'\nimport { buildExtensionRegistry } from \"@owlmeans/regov-ssi-core\"\nimport { buildIdentityExtension } from \"@owlmeans/regov-ext-identity/dist/ext\"\nimport { startWSServer } from '@owlmeans/regov-comm'\n\nimport './warmup'\n\nimport util from 'util'\nutil.inspect.defaultOptions.depth = 8\n\n\nconst httpServer = http.createServer((_, response) => {\n  response.writeHead(404)\n  response.end()\n})\n\nconst registry = buildExtensionRegistry()\nregistry.registerSync(buildIdentityExtension(\n  'RegovIdentity', { appName: 'Re:gov' },\n  {\n    name: 'OwlMeans Re:gov Identity',\n    code: 'regov-identity',\n    organization: 'OwlMeans',\n    home: 'https://owlmeans.org/',\n    schemaBaseUrl: 'https://owlmeans.org/schemas/'\n  }\n))\n\nstartWSServer(httpServer, {\n  timeout: parseInt(process.env.RECEIVE_MESSAGE_TIMEOUT || '30'),\n  did: {\n    prefix: process.env.DID_PREFIX,\n    baseSchemaUrl: process.env.DID_SCHEMA,\n    schemaPath: process.env.DID_SCHEMA_PATH,\n  },\n  message: {\n    ttl: 2 * 24 * 3600 * 1000\n  }\n}, registry)\n\nconst port = process.env.SERVER_WS_PORT || '80'\nhttpServer.listen(parseInt(port), \"localhost\", () => {\n  console.log('Server is listening on port: ' + port)\n})\n"]}